package osh.core;

import java.util.Random;
import java.util.stream.DoubleStream;

/**
 * Wrapper around a random generator, providing easier access to random numbers with specific characteristics.
 *
 * @author Florian Allerding, Kaibin Bao, Till Schuberth, Ingo Mauser
 */
public class OSHRandom {

    private final Random random;

    /**
     * Constructs this random with the given seed.
     *
     * @param randomSeed the seed
     */
    public OSHRandom(long randomSeed) {
        this.random = new Random(randomSeed);
    }

    /**
     * Returns a randomly generated integer.
     *
     * @return a randomly generated integer
     */
    public synchronized int getNextInt() {
        return this.random.nextInt();
    }

    /**
     * Returns a randomly generated integer between 0 (inclusive) and the given value (exclusive)
     *
     * @param max the upper bound of the random integer to create
     *
     * @return a random integer in [0, max)
     */
    public synchronized int getNextInt(int max) {
        return this.random.nextInt(max);
    }

    /**
     * Returns a randomly generated double between 0 (inclusive) and 1.0 (exclusive).
     *
     * @return a random double in [0, 1)
     */
    public synchronized double getNextDouble() {
        return this.random.nextDouble();
    }

    /**
     * Returns a stream of randomly generated doubles containing the given amount of values, each number being between
     * 0 (inclusive) and 1.0 (exclusive).
     *
     * @param limit the amount if doubles to generate
     *
     * @return a stream of limit doubles in [0, 1)
     */
    public synchronized DoubleStream getDoubleArray(int limit) {
        return this.random.doubles(limit);
    }

    /**
     * Returns an array of randomly generated doubles containing the given amount of values, each number being
     * between the given lower bound (inclusive) and the given upper bound (exclusive).
     *
     * @param limit the amount of doubles to generate
     * @param minBound the lower bound
     * @param maxBound the upper bound
     * @return an array of limit doubles in [minBound, maxBound)
     */
    public synchronized double[] getDoubleArrayBoundaries(int limit, double minBound, double maxBound) {
        return this.random.doubles(limit, minBound, maxBound).toArray();
    }

    /**
     * Fills the given byte-array with randomly generated bytes.
     *
     * @param bytes the array to fill
     */
    public synchronized void getNextBytes(byte[] bytes) {
        this.random.nextBytes(bytes);
    }

    /**
     * Returns a randomly generated double between 0 (inclusive) and the given upper bound (exclusive).
     *
     * @param max the upper bound
     * @return a random double in [0, max)
     */
    public synchronized double getNextDouble(double max) {
        return max * this.random.nextDouble();
    }

    /**
     * Returns a randomly generated float between 0 (inclusive) and 1.0 (exclusive).
     *
     * @return a random float in [0, 1)
     */
    public synchronized float getNextFloat() {
        return this.random.nextFloat();
    }

    /**
     * Returns a randomly generated long.
     *
     * @return a randomly generated long
     */
    public synchronized long getNextLong() {
        return this.random.nextLong();
    }

    /**
     * Returns a randomly generated boolean.
     *
     * @return a randomly generated boolean
     */
    public synchronized boolean getNextBoolean() {
        return this.random.nextBoolean();
    }

    /**
     * Returns a randomly generated double follwing the standard normal (gaussian) distribution with a mean of 0.0
     * and a standard deviation of 1.0.
     *
     * @return a random double follwing the standard normal distribution
     */
    public synchronized double getNextGaussian() {
        return this.random.nextGaussian();
    }
}
