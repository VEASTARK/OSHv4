//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.4.0-b180830.0438 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.04.16 at 05:56:33 PM CEST 
//


package osh.configuration.cal;

import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="assignedComDevices" type="{http://osh/configuration/cal}AssignedComDevice" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "assignedComDevices"
})
@XmlRootElement(name = "CALConfiguration")
public class CALConfiguration implements Copyable, PartialCopyable
{

    protected List<AssignedComDevice> assignedComDevices;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public CALConfiguration() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a CALConfiguration copying the state of another CALConfiguration
     * 
     * @param _other
     *     The original CALConfiguration from which to copy state.
     */
    public CALConfiguration(final CALConfiguration _other) {
        if (_other.assignedComDevices == null) {
            this.assignedComDevices = null;
        } else {
            this.assignedComDevices = new ArrayList<AssignedComDevice>();
            for (AssignedComDevice _item: _other.assignedComDevices) {
                this.assignedComDevices.add(((_item == null)?null:_item.createCopy()));
            }
        }
    }

    /**
     * Instantiates a CALConfiguration copying the state of another CALConfiguration
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original CALConfiguration from which to copy state.
     */
    public CALConfiguration(final CALConfiguration _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree assignedComDevicesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("assignedComDevices"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(assignedComDevicesPropertyTree!= null):((assignedComDevicesPropertyTree == null)||(!assignedComDevicesPropertyTree.isLeaf())))) {
            if (_other.assignedComDevices == null) {
                this.assignedComDevices = null;
            } else {
                this.assignedComDevices = new ArrayList<AssignedComDevice>();
                for (AssignedComDevice _item: _other.assignedComDevices) {
                    this.assignedComDevices.add(((_item == null)?null:_item.createCopy(assignedComDevicesPropertyTree, _propertyTreeUse)));
                }
            }
        }
    }

    /**
     * Gets the value of the assignedComDevices property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the assignedComDevices property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAssignedComDevices().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AssignedComDevice }
     * 
     * 
     */
    public List<AssignedComDevice> getAssignedComDevices() {
        if (assignedComDevices == null) {
            assignedComDevices = new ArrayList<AssignedComDevice>();
        }
        return this.assignedComDevices;
    }

    @Override
    public CALConfiguration createCopy() {
        final CALConfiguration _newObject;
        try {
            _newObject = ((CALConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        if (this.assignedComDevices == null) {
            _newObject.assignedComDevices = null;
        } else {
            _newObject.assignedComDevices = new ArrayList<AssignedComDevice>();
            for (AssignedComDevice _item: this.assignedComDevices) {
                _newObject.assignedComDevices.add(((_item == null)?null:_item.createCopy()));
            }
        }
        return _newObject;
    }

    @Override
    public CALConfiguration createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final CALConfiguration _newObject;
        try {
            _newObject = ((CALConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree assignedComDevicesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("assignedComDevices"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(assignedComDevicesPropertyTree!= null):((assignedComDevicesPropertyTree == null)||(!assignedComDevicesPropertyTree.isLeaf())))) {
            if (this.assignedComDevices == null) {
                _newObject.assignedComDevices = null;
            } else {
                _newObject.assignedComDevices = new ArrayList<AssignedComDevice>();
                for (AssignedComDevice _item: this.assignedComDevices) {
                    _newObject.assignedComDevices.add(((_item == null)?null:_item.createCopy(assignedComDevicesPropertyTree, _propertyTreeUse)));
                }
            }
        }
        return _newObject;
    }

    @Override
    public CALConfiguration copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public CALConfiguration copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends CALConfiguration.Selector<CALConfiguration.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static CALConfiguration.Select _root() {
            return new CALConfiguration.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private AssignedComDevice.Selector<TRoot, CALConfiguration.Selector<TRoot, TParent>> assignedComDevices = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.assignedComDevices!= null) {
                products.put("assignedComDevices", this.assignedComDevices.init());
            }
            return products;
        }

        public AssignedComDevice.Selector<TRoot, CALConfiguration.Selector<TRoot, TParent>> assignedComDevices() {
            return ((this.assignedComDevices == null)?this.assignedComDevices = new AssignedComDevice.Selector<TRoot, CALConfiguration.Selector<TRoot, TParent>>(this._root, this, "assignedComDevices"):this.assignedComDevices);
        }

    }

}
