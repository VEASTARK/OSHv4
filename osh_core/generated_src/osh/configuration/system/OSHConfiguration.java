//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.4.0-b180830.0438 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.04.16 at 05:56:34 PM CEST 
//


package osh.configuration.system;

import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

import javax.xml.bind.annotation.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="runningType" type="{http://osh/configuration/system}runningType"/&gt;
 *         &lt;element name="randomSeed" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="engineParameters" type="{http://osh/configuration/system}ConfigurationParameter" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="logFilePath" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="gridConfigurations" type="{http://osh/configuration/system}GridConfig" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="meterUUID" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="hhUUID" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "runningType",
    "randomSeed",
    "engineParameters",
    "logFilePath",
    "gridConfigurations",
    "meterUUID",
    "hhUUID"
})
@XmlRootElement(name = "OSHConfiguration")
public class OSHConfiguration implements Copyable, PartialCopyable
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected RunningType runningType;
    @XmlElement(required = true)
    protected String randomSeed;
    protected List<ConfigurationParameter> engineParameters;
    @XmlElement(required = true)
    protected String logFilePath;
    protected List<GridConfig> gridConfigurations;
    @XmlElement(required = true)
    protected String meterUUID;
    @XmlElement(required = true)
    protected String hhUUID;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public OSHConfiguration() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a OSHConfiguration copying the state of another OSHConfiguration
     * 
     * @param _other
     *     The original OSHConfiguration from which to copy state.
     */
    public OSHConfiguration(final OSHConfiguration _other) {
        this.runningType = _other.runningType;
        this.randomSeed = _other.randomSeed;
        if (_other.engineParameters == null) {
            this.engineParameters = null;
        } else {
            this.engineParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: _other.engineParameters) {
                this.engineParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
        this.logFilePath = _other.logFilePath;
        if (_other.gridConfigurations == null) {
            this.gridConfigurations = null;
        } else {
            this.gridConfigurations = new ArrayList<GridConfig>();
            for (GridConfig _item: _other.gridConfigurations) {
                this.gridConfigurations.add(((_item == null)?null:_item.createCopy()));
            }
        }
        this.meterUUID = _other.meterUUID;
        this.hhUUID = _other.hhUUID;
    }

    /**
     * Instantiates a OSHConfiguration copying the state of another OSHConfiguration
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original OSHConfiguration from which to copy state.
     */
    public OSHConfiguration(final OSHConfiguration _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree runningTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("runningType"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(runningTypePropertyTree!= null):((runningTypePropertyTree == null)||(!runningTypePropertyTree.isLeaf())))) {
            this.runningType = _other.runningType;
        }
        final PropertyTree randomSeedPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("randomSeed"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(randomSeedPropertyTree!= null):((randomSeedPropertyTree == null)||(!randomSeedPropertyTree.isLeaf())))) {
            this.randomSeed = _other.randomSeed;
        }
        final PropertyTree engineParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("engineParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(engineParametersPropertyTree!= null):((engineParametersPropertyTree == null)||(!engineParametersPropertyTree.isLeaf())))) {
            if (_other.engineParameters == null) {
                this.engineParameters = null;
            } else {
                this.engineParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: _other.engineParameters) {
                    this.engineParameters.add(((_item == null)?null:_item.createCopy(engineParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree logFilePathPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("logFilePath"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(logFilePathPropertyTree!= null):((logFilePathPropertyTree == null)||(!logFilePathPropertyTree.isLeaf())))) {
            this.logFilePath = _other.logFilePath;
        }
        final PropertyTree gridConfigurationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gridConfigurations"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gridConfigurationsPropertyTree!= null):((gridConfigurationsPropertyTree == null)||(!gridConfigurationsPropertyTree.isLeaf())))) {
            if (_other.gridConfigurations == null) {
                this.gridConfigurations = null;
            } else {
                this.gridConfigurations = new ArrayList<GridConfig>();
                for (GridConfig _item: _other.gridConfigurations) {
                    this.gridConfigurations.add(((_item == null)?null:_item.createCopy(gridConfigurationsPropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree meterUUIDPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meterUUID"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meterUUIDPropertyTree!= null):((meterUUIDPropertyTree == null)||(!meterUUIDPropertyTree.isLeaf())))) {
            this.meterUUID = _other.meterUUID;
        }
        final PropertyTree hhUUIDPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("hhUUID"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hhUUIDPropertyTree!= null):((hhUUIDPropertyTree == null)||(!hhUUIDPropertyTree.isLeaf())))) {
            this.hhUUID = _other.hhUUID;
        }
    }

    /**
     * Gets the value of the runningType property.
     * 
     * @return
     *     possible object is
     *     {@link RunningType }
     *     
     */
    public RunningType getRunningType() {
        return runningType;
    }

    /**
     * Sets the value of the runningType property.
     * 
     * @param value
     *     allowed object is
     *     {@link RunningType }
     *     
     */
    public void setRunningType(RunningType value) {
        this.runningType = value;
    }

    /**
     * Gets the value of the randomSeed property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRandomSeed() {
        return randomSeed;
    }

    /**
     * Sets the value of the randomSeed property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRandomSeed(String value) {
        this.randomSeed = value;
    }

    /**
     * Gets the value of the engineParameters property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the engineParameters property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEngineParameters().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConfigurationParameter }
     * 
     * 
     */
    public List<ConfigurationParameter> getEngineParameters() {
        if (engineParameters == null) {
            engineParameters = new ArrayList<ConfigurationParameter>();
        }
        return this.engineParameters;
    }

    /**
     * Gets the value of the logFilePath property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLogFilePath() {
        return logFilePath;
    }

    /**
     * Sets the value of the logFilePath property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLogFilePath(String value) {
        this.logFilePath = value;
    }

    /**
     * Gets the value of the gridConfigurations property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the gridConfigurations property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGridConfigurations().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link GridConfig }
     * 
     * 
     */
    public List<GridConfig> getGridConfigurations() {
        if (gridConfigurations == null) {
            gridConfigurations = new ArrayList<GridConfig>();
        }
        return this.gridConfigurations;
    }

    /**
     * Gets the value of the meterUUID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMeterUUID() {
        return meterUUID;
    }

    /**
     * Sets the value of the meterUUID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMeterUUID(String value) {
        this.meterUUID = value;
    }

    /**
     * Gets the value of the hhUUID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getHhUUID() {
        return hhUUID;
    }

    /**
     * Sets the value of the hhUUID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setHhUUID(String value) {
        this.hhUUID = value;
    }

    @Override
    public OSHConfiguration createCopy() {
        final OSHConfiguration _newObject;
        try {
            _newObject = ((OSHConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.runningType = this.runningType;
        _newObject.randomSeed = this.randomSeed;
        if (this.engineParameters == null) {
            _newObject.engineParameters = null;
        } else {
            _newObject.engineParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: this.engineParameters) {
                _newObject.engineParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
        _newObject.logFilePath = this.logFilePath;
        if (this.gridConfigurations == null) {
            _newObject.gridConfigurations = null;
        } else {
            _newObject.gridConfigurations = new ArrayList<GridConfig>();
            for (GridConfig _item: this.gridConfigurations) {
                _newObject.gridConfigurations.add(((_item == null)?null:_item.createCopy()));
            }
        }
        _newObject.meterUUID = this.meterUUID;
        _newObject.hhUUID = this.hhUUID;
        return _newObject;
    }

    @Override
    public OSHConfiguration createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final OSHConfiguration _newObject;
        try {
            _newObject = ((OSHConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree runningTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("runningType"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(runningTypePropertyTree!= null):((runningTypePropertyTree == null)||(!runningTypePropertyTree.isLeaf())))) {
            _newObject.runningType = this.runningType;
        }
        final PropertyTree randomSeedPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("randomSeed"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(randomSeedPropertyTree!= null):((randomSeedPropertyTree == null)||(!randomSeedPropertyTree.isLeaf())))) {
            _newObject.randomSeed = this.randomSeed;
        }
        final PropertyTree engineParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("engineParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(engineParametersPropertyTree!= null):((engineParametersPropertyTree == null)||(!engineParametersPropertyTree.isLeaf())))) {
            if (this.engineParameters == null) {
                _newObject.engineParameters = null;
            } else {
                _newObject.engineParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: this.engineParameters) {
                    _newObject.engineParameters.add(((_item == null)?null:_item.createCopy(engineParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree logFilePathPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("logFilePath"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(logFilePathPropertyTree!= null):((logFilePathPropertyTree == null)||(!logFilePathPropertyTree.isLeaf())))) {
            _newObject.logFilePath = this.logFilePath;
        }
        final PropertyTree gridConfigurationsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("gridConfigurations"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(gridConfigurationsPropertyTree!= null):((gridConfigurationsPropertyTree == null)||(!gridConfigurationsPropertyTree.isLeaf())))) {
            if (this.gridConfigurations == null) {
                _newObject.gridConfigurations = null;
            } else {
                _newObject.gridConfigurations = new ArrayList<GridConfig>();
                for (GridConfig _item: this.gridConfigurations) {
                    _newObject.gridConfigurations.add(((_item == null)?null:_item.createCopy(gridConfigurationsPropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree meterUUIDPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("meterUUID"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(meterUUIDPropertyTree!= null):((meterUUIDPropertyTree == null)||(!meterUUIDPropertyTree.isLeaf())))) {
            _newObject.meterUUID = this.meterUUID;
        }
        final PropertyTree hhUUIDPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("hhUUID"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(hhUUIDPropertyTree!= null):((hhUUIDPropertyTree == null)||(!hhUUIDPropertyTree.isLeaf())))) {
            _newObject.hhUUID = this.hhUUID;
        }
        return _newObject;
    }

    @Override
    public OSHConfiguration copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public OSHConfiguration copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends OSHConfiguration.Selector<OSHConfiguration.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static OSHConfiguration.Select _root() {
            return new OSHConfiguration.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> runningType = null;
        private com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> randomSeed = null;
        private ConfigurationParameter.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> engineParameters = null;
        private com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> logFilePath = null;
        private GridConfig.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> gridConfigurations = null;
        private com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> meterUUID = null;
        private com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> hhUUID = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.runningType!= null) {
                products.put("runningType", this.runningType.init());
            }
            if (this.randomSeed!= null) {
                products.put("randomSeed", this.randomSeed.init());
            }
            if (this.engineParameters!= null) {
                products.put("engineParameters", this.engineParameters.init());
            }
            if (this.logFilePath!= null) {
                products.put("logFilePath", this.logFilePath.init());
            }
            if (this.gridConfigurations!= null) {
                products.put("gridConfigurations", this.gridConfigurations.init());
            }
            if (this.meterUUID!= null) {
                products.put("meterUUID", this.meterUUID.init());
            }
            if (this.hhUUID!= null) {
                products.put("hhUUID", this.hhUUID.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> runningType() {
            return ((this.runningType == null)?this.runningType = new com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>>(this._root, this, "runningType"):this.runningType);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> randomSeed() {
            return ((this.randomSeed == null)?this.randomSeed = new com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>>(this._root, this, "randomSeed"):this.randomSeed);
        }

        public ConfigurationParameter.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> engineParameters() {
            return ((this.engineParameters == null)?this.engineParameters = new ConfigurationParameter.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>>(this._root, this, "engineParameters"):this.engineParameters);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> logFilePath() {
            return ((this.logFilePath == null)?this.logFilePath = new com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>>(this._root, this, "logFilePath"):this.logFilePath);
        }

        public GridConfig.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> gridConfigurations() {
            return ((this.gridConfigurations == null)?this.gridConfigurations = new GridConfig.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>>(this._root, this, "gridConfigurations"):this.gridConfigurations);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> meterUUID() {
            return ((this.meterUUID == null)?this.meterUUID = new com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>>(this._root, this, "meterUUID"):this.meterUUID);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>> hhUUID() {
            return ((this.hhUUID == null)?this.hhUUID = new com.kscs.util.jaxb.Selector<TRoot, OSHConfiguration.Selector<TRoot, TParent>>(this._root, this, "hhUUID"):this.hhUUID);
        }

    }

}
