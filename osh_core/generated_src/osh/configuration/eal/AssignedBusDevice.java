//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.4.0-b180830.0438 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.08.10 at 05:32:57 PM CEST 
//


package osh.configuration.eal;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import osh.configuration.system.BusDeviceClassification;
import osh.configuration.system.BusDeviceTypes;
import osh.configuration.system.ConfigurationParameter;


/**
 * <p>Java class for AssignedBusDevice complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AssignedBusDevice"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="busDeviceID" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="busDeviceType" type="{http://osh/configuration/system}BusDeviceTypes"/&gt;
 *         &lt;element name="busDeviceClassification" type="{http://osh/configuration/system}BusDeviceClassification"/&gt;
 *         &lt;element name="busDeviceDescription" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="busManagerClassName" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="busDriverClassName" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="busDriverParameters" type="{http://osh/configuration/system}ConfigurationParameter" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AssignedBusDevice", propOrder = {
    "busDeviceID",
    "busDeviceType",
    "busDeviceClassification",
    "busDeviceDescription",
    "busManagerClassName",
    "busDriverClassName",
    "busDriverParameters"
})
public class AssignedBusDevice implements Copyable, PartialCopyable
{

    @XmlElement(required = true)
    protected String busDeviceID;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected BusDeviceTypes busDeviceType;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected BusDeviceClassification busDeviceClassification;
    @XmlElement(required = true)
    protected String busDeviceDescription;
    @XmlElement(required = true)
    protected String busManagerClassName;
    @XmlElement(required = true)
    protected String busDriverClassName;
    protected List<ConfigurationParameter> busDriverParameters;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public AssignedBusDevice() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a AssignedBusDevice copying the state of another AssignedBusDevice
     * 
     * @param _other
     *     The original AssignedBusDevice from which to copy state.
     */
    public AssignedBusDevice(final AssignedBusDevice _other) {
        this.busDeviceID = _other.busDeviceID;
        this.busDeviceType = _other.busDeviceType;
        this.busDeviceClassification = _other.busDeviceClassification;
        this.busDeviceDescription = _other.busDeviceDescription;
        this.busManagerClassName = _other.busManagerClassName;
        this.busDriverClassName = _other.busDriverClassName;
        if (_other.busDriverParameters == null) {
            this.busDriverParameters = null;
        } else {
            this.busDriverParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: _other.busDriverParameters) {
                this.busDriverParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
    }

    /**
     * Instantiates a AssignedBusDevice copying the state of another AssignedBusDevice
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original AssignedBusDevice from which to copy state.
     */
    public AssignedBusDevice(final AssignedBusDevice _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree busDeviceIDPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busDeviceID"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busDeviceIDPropertyTree!= null):((busDeviceIDPropertyTree == null)||(!busDeviceIDPropertyTree.isLeaf())))) {
            this.busDeviceID = _other.busDeviceID;
        }
        final PropertyTree busDeviceTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busDeviceType"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busDeviceTypePropertyTree!= null):((busDeviceTypePropertyTree == null)||(!busDeviceTypePropertyTree.isLeaf())))) {
            this.busDeviceType = _other.busDeviceType;
        }
        final PropertyTree busDeviceClassificationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busDeviceClassification"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busDeviceClassificationPropertyTree!= null):((busDeviceClassificationPropertyTree == null)||(!busDeviceClassificationPropertyTree.isLeaf())))) {
            this.busDeviceClassification = _other.busDeviceClassification;
        }
        final PropertyTree busDeviceDescriptionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busDeviceDescription"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busDeviceDescriptionPropertyTree!= null):((busDeviceDescriptionPropertyTree == null)||(!busDeviceDescriptionPropertyTree.isLeaf())))) {
            this.busDeviceDescription = _other.busDeviceDescription;
        }
        final PropertyTree busManagerClassNamePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busManagerClassName"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busManagerClassNamePropertyTree!= null):((busManagerClassNamePropertyTree == null)||(!busManagerClassNamePropertyTree.isLeaf())))) {
            this.busManagerClassName = _other.busManagerClassName;
        }
        final PropertyTree busDriverClassNamePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busDriverClassName"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busDriverClassNamePropertyTree!= null):((busDriverClassNamePropertyTree == null)||(!busDriverClassNamePropertyTree.isLeaf())))) {
            this.busDriverClassName = _other.busDriverClassName;
        }
        final PropertyTree busDriverParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busDriverParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busDriverParametersPropertyTree!= null):((busDriverParametersPropertyTree == null)||(!busDriverParametersPropertyTree.isLeaf())))) {
            if (_other.busDriverParameters == null) {
                this.busDriverParameters = null;
            } else {
                this.busDriverParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: _other.busDriverParameters) {
                    this.busDriverParameters.add(((_item == null)?null:_item.createCopy(busDriverParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
    }

    /**
     * Gets the value of the busDeviceID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBusDeviceID() {
        return busDeviceID;
    }

    /**
     * Sets the value of the busDeviceID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBusDeviceID(String value) {
        this.busDeviceID = value;
    }

    /**
     * Gets the value of the busDeviceType property.
     * 
     * @return
     *     possible object is
     *     {@link BusDeviceTypes }
     *     
     */
    public BusDeviceTypes getBusDeviceType() {
        return busDeviceType;
    }

    /**
     * Sets the value of the busDeviceType property.
     * 
     * @param value
     *     allowed object is
     *     {@link BusDeviceTypes }
     *     
     */
    public void setBusDeviceType(BusDeviceTypes value) {
        this.busDeviceType = value;
    }

    /**
     * Gets the value of the busDeviceClassification property.
     * 
     * @return
     *     possible object is
     *     {@link BusDeviceClassification }
     *     
     */
    public BusDeviceClassification getBusDeviceClassification() {
        return busDeviceClassification;
    }

    /**
     * Sets the value of the busDeviceClassification property.
     * 
     * @param value
     *     allowed object is
     *     {@link BusDeviceClassification }
     *     
     */
    public void setBusDeviceClassification(BusDeviceClassification value) {
        this.busDeviceClassification = value;
    }

    /**
     * Gets the value of the busDeviceDescription property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBusDeviceDescription() {
        return busDeviceDescription;
    }

    /**
     * Sets the value of the busDeviceDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBusDeviceDescription(String value) {
        this.busDeviceDescription = value;
    }

    /**
     * Gets the value of the busManagerClassName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBusManagerClassName() {
        return busManagerClassName;
    }

    /**
     * Sets the value of the busManagerClassName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBusManagerClassName(String value) {
        this.busManagerClassName = value;
    }

    /**
     * Gets the value of the busDriverClassName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBusDriverClassName() {
        return busDriverClassName;
    }

    /**
     * Sets the value of the busDriverClassName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBusDriverClassName(String value) {
        this.busDriverClassName = value;
    }

    /**
     * Gets the value of the busDriverParameters property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the busDriverParameters property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBusDriverParameters().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConfigurationParameter }
     * 
     * 
     */
    public List<ConfigurationParameter> getBusDriverParameters() {
        if (busDriverParameters == null) {
            busDriverParameters = new ArrayList<ConfigurationParameter>();
        }
        return this.busDriverParameters;
    }

    @Override
    public AssignedBusDevice createCopy() {
        final AssignedBusDevice _newObject;
        try {
            _newObject = ((AssignedBusDevice) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.busDeviceID = this.busDeviceID;
        _newObject.busDeviceType = this.busDeviceType;
        _newObject.busDeviceClassification = this.busDeviceClassification;
        _newObject.busDeviceDescription = this.busDeviceDescription;
        _newObject.busManagerClassName = this.busManagerClassName;
        _newObject.busDriverClassName = this.busDriverClassName;
        if (this.busDriverParameters == null) {
            _newObject.busDriverParameters = null;
        } else {
            _newObject.busDriverParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: this.busDriverParameters) {
                _newObject.busDriverParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
        return _newObject;
    }

    @Override
    public AssignedBusDevice createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final AssignedBusDevice _newObject;
        try {
            _newObject = ((AssignedBusDevice) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree busDeviceIDPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busDeviceID"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busDeviceIDPropertyTree!= null):((busDeviceIDPropertyTree == null)||(!busDeviceIDPropertyTree.isLeaf())))) {
            _newObject.busDeviceID = this.busDeviceID;
        }
        final PropertyTree busDeviceTypePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busDeviceType"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busDeviceTypePropertyTree!= null):((busDeviceTypePropertyTree == null)||(!busDeviceTypePropertyTree.isLeaf())))) {
            _newObject.busDeviceType = this.busDeviceType;
        }
        final PropertyTree busDeviceClassificationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busDeviceClassification"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busDeviceClassificationPropertyTree!= null):((busDeviceClassificationPropertyTree == null)||(!busDeviceClassificationPropertyTree.isLeaf())))) {
            _newObject.busDeviceClassification = this.busDeviceClassification;
        }
        final PropertyTree busDeviceDescriptionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busDeviceDescription"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busDeviceDescriptionPropertyTree!= null):((busDeviceDescriptionPropertyTree == null)||(!busDeviceDescriptionPropertyTree.isLeaf())))) {
            _newObject.busDeviceDescription = this.busDeviceDescription;
        }
        final PropertyTree busManagerClassNamePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busManagerClassName"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busManagerClassNamePropertyTree!= null):((busManagerClassNamePropertyTree == null)||(!busManagerClassNamePropertyTree.isLeaf())))) {
            _newObject.busManagerClassName = this.busManagerClassName;
        }
        final PropertyTree busDriverClassNamePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busDriverClassName"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busDriverClassNamePropertyTree!= null):((busDriverClassNamePropertyTree == null)||(!busDriverClassNamePropertyTree.isLeaf())))) {
            _newObject.busDriverClassName = this.busDriverClassName;
        }
        final PropertyTree busDriverParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("busDriverParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(busDriverParametersPropertyTree!= null):((busDriverParametersPropertyTree == null)||(!busDriverParametersPropertyTree.isLeaf())))) {
            if (this.busDriverParameters == null) {
                _newObject.busDriverParameters = null;
            } else {
                _newObject.busDriverParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: this.busDriverParameters) {
                    _newObject.busDriverParameters.add(((_item == null)?null:_item.createCopy(busDriverParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
        return _newObject;
    }

    @Override
    public AssignedBusDevice copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public AssignedBusDevice copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends AssignedBusDevice.Selector<AssignedBusDevice.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static AssignedBusDevice.Select _root() {
            return new AssignedBusDevice.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busDeviceID = null;
        private com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busDeviceType = null;
        private com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busDeviceClassification = null;
        private com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busDeviceDescription = null;
        private com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busManagerClassName = null;
        private com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busDriverClassName = null;
        private ConfigurationParameter.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busDriverParameters = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.busDeviceID!= null) {
                products.put("busDeviceID", this.busDeviceID.init());
            }
            if (this.busDeviceType!= null) {
                products.put("busDeviceType", this.busDeviceType.init());
            }
            if (this.busDeviceClassification!= null) {
                products.put("busDeviceClassification", this.busDeviceClassification.init());
            }
            if (this.busDeviceDescription!= null) {
                products.put("busDeviceDescription", this.busDeviceDescription.init());
            }
            if (this.busManagerClassName!= null) {
                products.put("busManagerClassName", this.busManagerClassName.init());
            }
            if (this.busDriverClassName!= null) {
                products.put("busDriverClassName", this.busDriverClassName.init());
            }
            if (this.busDriverParameters!= null) {
                products.put("busDriverParameters", this.busDriverParameters.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busDeviceID() {
            return ((this.busDeviceID == null)?this.busDeviceID = new com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>>(this._root, this, "busDeviceID"):this.busDeviceID);
        }

        public com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busDeviceType() {
            return ((this.busDeviceType == null)?this.busDeviceType = new com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>>(this._root, this, "busDeviceType"):this.busDeviceType);
        }

        public com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busDeviceClassification() {
            return ((this.busDeviceClassification == null)?this.busDeviceClassification = new com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>>(this._root, this, "busDeviceClassification"):this.busDeviceClassification);
        }

        public com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busDeviceDescription() {
            return ((this.busDeviceDescription == null)?this.busDeviceDescription = new com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>>(this._root, this, "busDeviceDescription"):this.busDeviceDescription);
        }

        public com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busManagerClassName() {
            return ((this.busManagerClassName == null)?this.busManagerClassName = new com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>>(this._root, this, "busManagerClassName"):this.busManagerClassName);
        }

        public com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busDriverClassName() {
            return ((this.busDriverClassName == null)?this.busDriverClassName = new com.kscs.util.jaxb.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>>(this._root, this, "busDriverClassName"):this.busDriverClassName);
        }

        public ConfigurationParameter.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>> busDriverParameters() {
            return ((this.busDriverParameters == null)?this.busDriverParameters = new ConfigurationParameter.Selector<TRoot, AssignedBusDevice.Selector<TRoot, TParent>>(this._root, this, "busDriverParameters"):this.busDriverParameters);
        }

    }

}
