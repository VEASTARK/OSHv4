//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.4.0-b180830.0438 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.08.10 at 03:54:45 PM CEST 
//


package osh.configuration.eal;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="assignedDevices" type="{http://osh/configuration/eal}AssignedDevice" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="assignedBusDevices" type="{http://osh/configuration/eal}AssignedBusDevice" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "assignedDevices",
    "assignedBusDevices"
})
@XmlRootElement(name = "EALConfiguration")
public class EALConfiguration implements Copyable, PartialCopyable
{

    protected List<AssignedDevice> assignedDevices;
    protected List<AssignedBusDevice> assignedBusDevices;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public EALConfiguration() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a EALConfiguration copying the state of another EALConfiguration
     * 
     * @param _other
     *     The original EALConfiguration from which to copy state.
     */
    public EALConfiguration(final EALConfiguration _other) {
        if (_other.assignedDevices == null) {
            this.assignedDevices = null;
        } else {
            this.assignedDevices = new ArrayList<AssignedDevice>();
            for (AssignedDevice _item: _other.assignedDevices) {
                this.assignedDevices.add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (_other.assignedBusDevices == null) {
            this.assignedBusDevices = null;
        } else {
            this.assignedBusDevices = new ArrayList<AssignedBusDevice>();
            for (AssignedBusDevice _item: _other.assignedBusDevices) {
                this.assignedBusDevices.add(((_item == null)?null:_item.createCopy()));
            }
        }
    }

    /**
     * Instantiates a EALConfiguration copying the state of another EALConfiguration
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original EALConfiguration from which to copy state.
     */
    public EALConfiguration(final EALConfiguration _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree assignedDevicesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("assignedDevices"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(assignedDevicesPropertyTree!= null):((assignedDevicesPropertyTree == null)||(!assignedDevicesPropertyTree.isLeaf())))) {
            if (_other.assignedDevices == null) {
                this.assignedDevices = null;
            } else {
                this.assignedDevices = new ArrayList<AssignedDevice>();
                for (AssignedDevice _item: _other.assignedDevices) {
                    this.assignedDevices.add(((_item == null)?null:_item.createCopy(assignedDevicesPropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree assignedBusDevicesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("assignedBusDevices"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(assignedBusDevicesPropertyTree!= null):((assignedBusDevicesPropertyTree == null)||(!assignedBusDevicesPropertyTree.isLeaf())))) {
            if (_other.assignedBusDevices == null) {
                this.assignedBusDevices = null;
            } else {
                this.assignedBusDevices = new ArrayList<AssignedBusDevice>();
                for (AssignedBusDevice _item: _other.assignedBusDevices) {
                    this.assignedBusDevices.add(((_item == null)?null:_item.createCopy(assignedBusDevicesPropertyTree, _propertyTreeUse)));
                }
            }
        }
    }

    /**
     * Gets the value of the assignedDevices property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the assignedDevices property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAssignedDevices().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AssignedDevice }
     * 
     * 
     */
    public List<AssignedDevice> getAssignedDevices() {
        if (assignedDevices == null) {
            assignedDevices = new ArrayList<AssignedDevice>();
        }
        return this.assignedDevices;
    }

    /**
     * Gets the value of the assignedBusDevices property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the assignedBusDevices property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAssignedBusDevices().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AssignedBusDevice }
     * 
     * 
     */
    public List<AssignedBusDevice> getAssignedBusDevices() {
        if (assignedBusDevices == null) {
            assignedBusDevices = new ArrayList<AssignedBusDevice>();
        }
        return this.assignedBusDevices;
    }

    @Override
    public EALConfiguration createCopy() {
        final EALConfiguration _newObject;
        try {
            _newObject = ((EALConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        if (this.assignedDevices == null) {
            _newObject.assignedDevices = null;
        } else {
            _newObject.assignedDevices = new ArrayList<AssignedDevice>();
            for (AssignedDevice _item: this.assignedDevices) {
                _newObject.assignedDevices.add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (this.assignedBusDevices == null) {
            _newObject.assignedBusDevices = null;
        } else {
            _newObject.assignedBusDevices = new ArrayList<AssignedBusDevice>();
            for (AssignedBusDevice _item: this.assignedBusDevices) {
                _newObject.assignedBusDevices.add(((_item == null)?null:_item.createCopy()));
            }
        }
        return _newObject;
    }

    @Override
    public EALConfiguration createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final EALConfiguration _newObject;
        try {
            _newObject = ((EALConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree assignedDevicesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("assignedDevices"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(assignedDevicesPropertyTree!= null):((assignedDevicesPropertyTree == null)||(!assignedDevicesPropertyTree.isLeaf())))) {
            if (this.assignedDevices == null) {
                _newObject.assignedDevices = null;
            } else {
                _newObject.assignedDevices = new ArrayList<AssignedDevice>();
                for (AssignedDevice _item: this.assignedDevices) {
                    _newObject.assignedDevices.add(((_item == null)?null:_item.createCopy(assignedDevicesPropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree assignedBusDevicesPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("assignedBusDevices"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(assignedBusDevicesPropertyTree!= null):((assignedBusDevicesPropertyTree == null)||(!assignedBusDevicesPropertyTree.isLeaf())))) {
            if (this.assignedBusDevices == null) {
                _newObject.assignedBusDevices = null;
            } else {
                _newObject.assignedBusDevices = new ArrayList<AssignedBusDevice>();
                for (AssignedBusDevice _item: this.assignedBusDevices) {
                    _newObject.assignedBusDevices.add(((_item == null)?null:_item.createCopy(assignedBusDevicesPropertyTree, _propertyTreeUse)));
                }
            }
        }
        return _newObject;
    }

    @Override
    public EALConfiguration copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public EALConfiguration copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends EALConfiguration.Selector<EALConfiguration.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static EALConfiguration.Select _root() {
            return new EALConfiguration.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private AssignedDevice.Selector<TRoot, EALConfiguration.Selector<TRoot, TParent>> assignedDevices = null;
        private AssignedBusDevice.Selector<TRoot, EALConfiguration.Selector<TRoot, TParent>> assignedBusDevices = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.assignedDevices!= null) {
                products.put("assignedDevices", this.assignedDevices.init());
            }
            if (this.assignedBusDevices!= null) {
                products.put("assignedBusDevices", this.assignedBusDevices.init());
            }
            return products;
        }

        public AssignedDevice.Selector<TRoot, EALConfiguration.Selector<TRoot, TParent>> assignedDevices() {
            return ((this.assignedDevices == null)?this.assignedDevices = new AssignedDevice.Selector<TRoot, EALConfiguration.Selector<TRoot, TParent>>(this._root, this, "assignedDevices"):this.assignedDevices);
        }

        public AssignedBusDevice.Selector<TRoot, EALConfiguration.Selector<TRoot, TParent>> assignedBusDevices() {
            return ((this.assignedBusDevices == null)?this.assignedBusDevices = new AssignedBusDevice.Selector<TRoot, EALConfiguration.Selector<TRoot, TParent>>(this._root, this, "assignedBusDevices"):this.assignedBusDevices);
        }

    }

}
