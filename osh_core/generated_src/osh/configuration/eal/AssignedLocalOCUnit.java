//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.4.0-b180830.0438 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.04.03 at 04:51:18 PM CEST 
//


package osh.configuration.eal;

import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import osh.configuration.system.ConfigurationParameter;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * <p>Java class for AssignedLocalOCUnit complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AssignedLocalOCUnit"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="unitDescription" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="localControllerClassName" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="localObserverClassName" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="localObserverParameters" type="{http://osh/configuration/system}ConfigurationParameter" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="localControllerParameters" type="{http://osh/configuration/system}ConfigurationParameter" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AssignedLocalOCUnit", propOrder = {
    "unitDescription",
    "localControllerClassName",
    "localObserverClassName",
    "localObserverParameters",
    "localControllerParameters"
})
public class AssignedLocalOCUnit implements Copyable, PartialCopyable
{

    @XmlElement(required = true)
    protected String unitDescription;
    @XmlElement(required = true)
    protected String localControllerClassName;
    @XmlElement(required = true)
    protected String localObserverClassName;
    protected List<ConfigurationParameter> localObserverParameters;
    protected List<ConfigurationParameter> localControllerParameters;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public AssignedLocalOCUnit() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a AssignedLocalOCUnit copying the state of another AssignedLocalOCUnit
     * 
     * @param _other
     *     The original AssignedLocalOCUnit from which to copy state.
     */
    public AssignedLocalOCUnit(final AssignedLocalOCUnit _other) {
        this.unitDescription = _other.unitDescription;
        this.localControllerClassName = _other.localControllerClassName;
        this.localObserverClassName = _other.localObserverClassName;
        if (_other.localObserverParameters == null) {
            this.localObserverParameters = null;
        } else {
            this.localObserverParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: _other.localObserverParameters) {
                this.localObserverParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (_other.localControllerParameters == null) {
            this.localControllerParameters = null;
        } else {
            this.localControllerParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: _other.localControllerParameters) {
                this.localControllerParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
    }

    /**
     * Instantiates a AssignedLocalOCUnit copying the state of another AssignedLocalOCUnit
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original AssignedLocalOCUnit from which to copy state.
     */
    public AssignedLocalOCUnit(final AssignedLocalOCUnit _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree unitDescriptionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("unitDescription"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(unitDescriptionPropertyTree!= null):((unitDescriptionPropertyTree == null)||(!unitDescriptionPropertyTree.isLeaf())))) {
            this.unitDescription = _other.unitDescription;
        }
        final PropertyTree localControllerClassNamePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("localControllerClassName"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(localControllerClassNamePropertyTree!= null):((localControllerClassNamePropertyTree == null)||(!localControllerClassNamePropertyTree.isLeaf())))) {
            this.localControllerClassName = _other.localControllerClassName;
        }
        final PropertyTree localObserverClassNamePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("localObserverClassName"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(localObserverClassNamePropertyTree!= null):((localObserverClassNamePropertyTree == null)||(!localObserverClassNamePropertyTree.isLeaf())))) {
            this.localObserverClassName = _other.localObserverClassName;
        }
        final PropertyTree localObserverParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("localObserverParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(localObserverParametersPropertyTree!= null):((localObserverParametersPropertyTree == null)||(!localObserverParametersPropertyTree.isLeaf())))) {
            if (_other.localObserverParameters == null) {
                this.localObserverParameters = null;
            } else {
                this.localObserverParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: _other.localObserverParameters) {
                    this.localObserverParameters.add(((_item == null)?null:_item.createCopy(localObserverParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree localControllerParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("localControllerParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(localControllerParametersPropertyTree!= null):((localControllerParametersPropertyTree == null)||(!localControllerParametersPropertyTree.isLeaf())))) {
            if (_other.localControllerParameters == null) {
                this.localControllerParameters = null;
            } else {
                this.localControllerParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: _other.localControllerParameters) {
                    this.localControllerParameters.add(((_item == null)?null:_item.createCopy(localControllerParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
    }

    /**
     * Gets the value of the unitDescription property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUnitDescription() {
        return unitDescription;
    }

    /**
     * Sets the value of the unitDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUnitDescription(String value) {
        this.unitDescription = value;
    }

    /**
     * Gets the value of the localControllerClassName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLocalControllerClassName() {
        return localControllerClassName;
    }

    /**
     * Sets the value of the localControllerClassName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLocalControllerClassName(String value) {
        this.localControllerClassName = value;
    }

    /**
     * Gets the value of the localObserverClassName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLocalObserverClassName() {
        return localObserverClassName;
    }

    /**
     * Sets the value of the localObserverClassName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLocalObserverClassName(String value) {
        this.localObserverClassName = value;
    }

    /**
     * Gets the value of the localObserverParameters property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the localObserverParameters property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLocalObserverParameters().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConfigurationParameter }
     * 
     * 
     */
    public List<ConfigurationParameter> getLocalObserverParameters() {
        if (localObserverParameters == null) {
            localObserverParameters = new ArrayList<ConfigurationParameter>();
        }
        return this.localObserverParameters;
    }

    /**
     * Gets the value of the localControllerParameters property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the localControllerParameters property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLocalControllerParameters().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConfigurationParameter }
     * 
     * 
     */
    public List<ConfigurationParameter> getLocalControllerParameters() {
        if (localControllerParameters == null) {
            localControllerParameters = new ArrayList<ConfigurationParameter>();
        }
        return this.localControllerParameters;
    }

    @Override
    public AssignedLocalOCUnit createCopy() {
        final AssignedLocalOCUnit _newObject;
        try {
            _newObject = ((AssignedLocalOCUnit) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.unitDescription = this.unitDescription;
        _newObject.localControllerClassName = this.localControllerClassName;
        _newObject.localObserverClassName = this.localObserverClassName;
        if (this.localObserverParameters == null) {
            _newObject.localObserverParameters = null;
        } else {
            _newObject.localObserverParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: this.localObserverParameters) {
                _newObject.localObserverParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
        if (this.localControllerParameters == null) {
            _newObject.localControllerParameters = null;
        } else {
            _newObject.localControllerParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: this.localControllerParameters) {
                _newObject.localControllerParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
        return _newObject;
    }

    @Override
    public AssignedLocalOCUnit createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final AssignedLocalOCUnit _newObject;
        try {
            _newObject = ((AssignedLocalOCUnit) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree unitDescriptionPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("unitDescription"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(unitDescriptionPropertyTree!= null):((unitDescriptionPropertyTree == null)||(!unitDescriptionPropertyTree.isLeaf())))) {
            _newObject.unitDescription = this.unitDescription;
        }
        final PropertyTree localControllerClassNamePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("localControllerClassName"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(localControllerClassNamePropertyTree!= null):((localControllerClassNamePropertyTree == null)||(!localControllerClassNamePropertyTree.isLeaf())))) {
            _newObject.localControllerClassName = this.localControllerClassName;
        }
        final PropertyTree localObserverClassNamePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("localObserverClassName"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(localObserverClassNamePropertyTree!= null):((localObserverClassNamePropertyTree == null)||(!localObserverClassNamePropertyTree.isLeaf())))) {
            _newObject.localObserverClassName = this.localObserverClassName;
        }
        final PropertyTree localObserverParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("localObserverParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(localObserverParametersPropertyTree!= null):((localObserverParametersPropertyTree == null)||(!localObserverParametersPropertyTree.isLeaf())))) {
            if (this.localObserverParameters == null) {
                _newObject.localObserverParameters = null;
            } else {
                _newObject.localObserverParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: this.localObserverParameters) {
                    _newObject.localObserverParameters.add(((_item == null)?null:_item.createCopy(localObserverParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree localControllerParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("localControllerParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(localControllerParametersPropertyTree!= null):((localControllerParametersPropertyTree == null)||(!localControllerParametersPropertyTree.isLeaf())))) {
            if (this.localControllerParameters == null) {
                _newObject.localControllerParameters = null;
            } else {
                _newObject.localControllerParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: this.localControllerParameters) {
                    _newObject.localControllerParameters.add(((_item == null)?null:_item.createCopy(localControllerParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
        return _newObject;
    }

    @Override
    public AssignedLocalOCUnit copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public AssignedLocalOCUnit copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends AssignedLocalOCUnit.Selector<AssignedLocalOCUnit.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static AssignedLocalOCUnit.Select _root() {
            return new AssignedLocalOCUnit.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>> unitDescription = null;
        private com.kscs.util.jaxb.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>> localControllerClassName = null;
        private com.kscs.util.jaxb.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>> localObserverClassName = null;
        private ConfigurationParameter.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>> localObserverParameters = null;
        private ConfigurationParameter.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>> localControllerParameters = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.unitDescription!= null) {
                products.put("unitDescription", this.unitDescription.init());
            }
            if (this.localControllerClassName!= null) {
                products.put("localControllerClassName", this.localControllerClassName.init());
            }
            if (this.localObserverClassName!= null) {
                products.put("localObserverClassName", this.localObserverClassName.init());
            }
            if (this.localObserverParameters!= null) {
                products.put("localObserverParameters", this.localObserverParameters.init());
            }
            if (this.localControllerParameters!= null) {
                products.put("localControllerParameters", this.localControllerParameters.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>> unitDescription() {
            return ((this.unitDescription == null)?this.unitDescription = new com.kscs.util.jaxb.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>>(this._root, this, "unitDescription"):this.unitDescription);
        }

        public com.kscs.util.jaxb.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>> localControllerClassName() {
            return ((this.localControllerClassName == null)?this.localControllerClassName = new com.kscs.util.jaxb.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>>(this._root, this, "localControllerClassName"):this.localControllerClassName);
        }

        public com.kscs.util.jaxb.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>> localObserverClassName() {
            return ((this.localObserverClassName == null)?this.localObserverClassName = new com.kscs.util.jaxb.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>>(this._root, this, "localObserverClassName"):this.localObserverClassName);
        }

        public ConfigurationParameter.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>> localObserverParameters() {
            return ((this.localObserverParameters == null)?this.localObserverParameters = new ConfigurationParameter.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>>(this._root, this, "localObserverParameters"):this.localObserverParameters);
        }

        public ConfigurationParameter.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>> localControllerParameters() {
            return ((this.localControllerParameters == null)?this.localControllerParameters = new ConfigurationParameter.Selector<TRoot, AssignedLocalOCUnit.Selector<TRoot, TParent>>(this._root, this, "localControllerParameters"):this.localControllerParameters);
        }

    }

}
