//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.4.0-b180830.0438 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.04.16 at 05:56:33 PM CEST 
//


package osh.configuration.oc;

import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

import javax.xml.bind.annotation.*;
import java.util.HashMap;
import java.util.Map;


/**
 * <p>Java class for CostConfiguration complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CostConfiguration"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="reactiveCosts" type="{http://osh/configuration/oc}reactiveCosts"/&gt;
 *         &lt;element name="activePlsCosts" type="{http://osh/configuration/oc}activePlsCosts"/&gt;
 *         &lt;element name="reactivePlsCosts" type="{http://osh/configuration/oc}reactivePlsCosts"/&gt;
 *         &lt;element name="feedInCosts" type="{http://osh/configuration/oc}feedInCosts"/&gt;
 *         &lt;element name="autoConsumptionCosts" type="{http://osh/configuration/oc}autoConsumptionCosts"/&gt;
 *         &lt;element name="selfSufficiencyRatio" type="{http://osh/configuration/oc}selfSufficiencyRatio"/&gt;
 *         &lt;element name="selfConsumptionRatio" type="{http://osh/configuration/oc}selfConsumptionRatio"/&gt;
 *         &lt;element name="overlimitFactor" type="{http://www.w3.org/2001/XMLSchema}double"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CostConfiguration", propOrder = {
    "reactiveCosts",
    "activePlsCosts",
    "reactivePlsCosts",
    "feedInCosts",
    "autoConsumptionCosts",
    "selfSufficiencyRatio",
    "selfConsumptionRatio",
    "overlimitFactor"
})
public class CostConfiguration implements Copyable, PartialCopyable
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected ReactiveCosts reactiveCosts;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected ActivePlsCosts activePlsCosts;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected ReactivePlsCosts reactivePlsCosts;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected FeedInCosts feedInCosts;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected AutoConsumptionCosts autoConsumptionCosts;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected SelfSufficiencyRatio selfSufficiencyRatio;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected SelfConsumptionRatio selfConsumptionRatio;
    protected double overlimitFactor;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public CostConfiguration() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a CostConfiguration copying the state of another CostConfiguration
     * 
     * @param _other
     *     The original CostConfiguration from which to copy state.
     */
    public CostConfiguration(final CostConfiguration _other) {
        this.reactiveCosts = _other.reactiveCosts;
        this.activePlsCosts = _other.activePlsCosts;
        this.reactivePlsCosts = _other.reactivePlsCosts;
        this.feedInCosts = _other.feedInCosts;
        this.autoConsumptionCosts = _other.autoConsumptionCosts;
        this.selfSufficiencyRatio = _other.selfSufficiencyRatio;
        this.selfConsumptionRatio = _other.selfConsumptionRatio;
        this.overlimitFactor = _other.overlimitFactor;
    }

    /**
     * Instantiates a CostConfiguration copying the state of another CostConfiguration
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original CostConfiguration from which to copy state.
     */
    public CostConfiguration(final CostConfiguration _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree reactiveCostsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("reactiveCosts"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(reactiveCostsPropertyTree!= null):((reactiveCostsPropertyTree == null)||(!reactiveCostsPropertyTree.isLeaf())))) {
            this.reactiveCosts = _other.reactiveCosts;
        }
        final PropertyTree activePlsCostsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("activePlsCosts"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(activePlsCostsPropertyTree!= null):((activePlsCostsPropertyTree == null)||(!activePlsCostsPropertyTree.isLeaf())))) {
            this.activePlsCosts = _other.activePlsCosts;
        }
        final PropertyTree reactivePlsCostsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("reactivePlsCosts"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(reactivePlsCostsPropertyTree!= null):((reactivePlsCostsPropertyTree == null)||(!reactivePlsCostsPropertyTree.isLeaf())))) {
            this.reactivePlsCosts = _other.reactivePlsCosts;
        }
        final PropertyTree feedInCostsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("feedInCosts"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(feedInCostsPropertyTree!= null):((feedInCostsPropertyTree == null)||(!feedInCostsPropertyTree.isLeaf())))) {
            this.feedInCosts = _other.feedInCosts;
        }
        final PropertyTree autoConsumptionCostsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("autoConsumptionCosts"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(autoConsumptionCostsPropertyTree!= null):((autoConsumptionCostsPropertyTree == null)||(!autoConsumptionCostsPropertyTree.isLeaf())))) {
            this.autoConsumptionCosts = _other.autoConsumptionCosts;
        }
        final PropertyTree selfSufficiencyRatioPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("selfSufficiencyRatio"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(selfSufficiencyRatioPropertyTree!= null):((selfSufficiencyRatioPropertyTree == null)||(!selfSufficiencyRatioPropertyTree.isLeaf())))) {
            this.selfSufficiencyRatio = _other.selfSufficiencyRatio;
        }
        final PropertyTree selfConsumptionRatioPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("selfConsumptionRatio"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(selfConsumptionRatioPropertyTree!= null):((selfConsumptionRatioPropertyTree == null)||(!selfConsumptionRatioPropertyTree.isLeaf())))) {
            this.selfConsumptionRatio = _other.selfConsumptionRatio;
        }
        final PropertyTree overlimitFactorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("overlimitFactor"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(overlimitFactorPropertyTree!= null):((overlimitFactorPropertyTree == null)||(!overlimitFactorPropertyTree.isLeaf())))) {
            this.overlimitFactor = _other.overlimitFactor;
        }
    }

    /**
     * Gets the value of the reactiveCosts property.
     * 
     * @return
     *     possible object is
     *     {@link ReactiveCosts }
     *     
     */
    public ReactiveCosts getReactiveCosts() {
        return reactiveCosts;
    }

    /**
     * Sets the value of the reactiveCosts property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReactiveCosts }
     *     
     */
    public void setReactiveCosts(ReactiveCosts value) {
        this.reactiveCosts = value;
    }

    /**
     * Gets the value of the activePlsCosts property.
     * 
     * @return
     *     possible object is
     *     {@link ActivePlsCosts }
     *     
     */
    public ActivePlsCosts getActivePlsCosts() {
        return activePlsCosts;
    }

    /**
     * Sets the value of the activePlsCosts property.
     * 
     * @param value
     *     allowed object is
     *     {@link ActivePlsCosts }
     *     
     */
    public void setActivePlsCosts(ActivePlsCosts value) {
        this.activePlsCosts = value;
    }

    /**
     * Gets the value of the reactivePlsCosts property.
     * 
     * @return
     *     possible object is
     *     {@link ReactivePlsCosts }
     *     
     */
    public ReactivePlsCosts getReactivePlsCosts() {
        return reactivePlsCosts;
    }

    /**
     * Sets the value of the reactivePlsCosts property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReactivePlsCosts }
     *     
     */
    public void setReactivePlsCosts(ReactivePlsCosts value) {
        this.reactivePlsCosts = value;
    }

    /**
     * Gets the value of the feedInCosts property.
     * 
     * @return
     *     possible object is
     *     {@link FeedInCosts }
     *     
     */
    public FeedInCosts getFeedInCosts() {
        return feedInCosts;
    }

    /**
     * Sets the value of the feedInCosts property.
     * 
     * @param value
     *     allowed object is
     *     {@link FeedInCosts }
     *     
     */
    public void setFeedInCosts(FeedInCosts value) {
        this.feedInCosts = value;
    }

    /**
     * Gets the value of the autoConsumptionCosts property.
     * 
     * @return
     *     possible object is
     *     {@link AutoConsumptionCosts }
     *     
     */
    public AutoConsumptionCosts getAutoConsumptionCosts() {
        return autoConsumptionCosts;
    }

    /**
     * Sets the value of the autoConsumptionCosts property.
     * 
     * @param value
     *     allowed object is
     *     {@link AutoConsumptionCosts }
     *     
     */
    public void setAutoConsumptionCosts(AutoConsumptionCosts value) {
        this.autoConsumptionCosts = value;
    }

    /**
     * Gets the value of the selfSufficiencyRatio property.
     * 
     * @return
     *     possible object is
     *     {@link SelfSufficiencyRatio }
     *     
     */
    public SelfSufficiencyRatio getSelfSufficiencyRatio() {
        return selfSufficiencyRatio;
    }

    /**
     * Sets the value of the selfSufficiencyRatio property.
     * 
     * @param value
     *     allowed object is
     *     {@link SelfSufficiencyRatio }
     *     
     */
    public void setSelfSufficiencyRatio(SelfSufficiencyRatio value) {
        this.selfSufficiencyRatio = value;
    }

    /**
     * Gets the value of the selfConsumptionRatio property.
     * 
     * @return
     *     possible object is
     *     {@link SelfConsumptionRatio }
     *     
     */
    public SelfConsumptionRatio getSelfConsumptionRatio() {
        return selfConsumptionRatio;
    }

    /**
     * Sets the value of the selfConsumptionRatio property.
     * 
     * @param value
     *     allowed object is
     *     {@link SelfConsumptionRatio }
     *     
     */
    public void setSelfConsumptionRatio(SelfConsumptionRatio value) {
        this.selfConsumptionRatio = value;
    }

    /**
     * Gets the value of the overlimitFactor property.
     * 
     */
    public double getOverlimitFactor() {
        return overlimitFactor;
    }

    /**
     * Sets the value of the overlimitFactor property.
     * 
     */
    public void setOverlimitFactor(double value) {
        this.overlimitFactor = value;
    }

    @Override
    public CostConfiguration createCopy() {
        final CostConfiguration _newObject;
        try {
            _newObject = ((CostConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.reactiveCosts = this.reactiveCosts;
        _newObject.activePlsCosts = this.activePlsCosts;
        _newObject.reactivePlsCosts = this.reactivePlsCosts;
        _newObject.feedInCosts = this.feedInCosts;
        _newObject.autoConsumptionCosts = this.autoConsumptionCosts;
        _newObject.selfSufficiencyRatio = this.selfSufficiencyRatio;
        _newObject.selfConsumptionRatio = this.selfConsumptionRatio;
        _newObject.overlimitFactor = this.overlimitFactor;
        return _newObject;
    }

    @Override
    public CostConfiguration createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final CostConfiguration _newObject;
        try {
            _newObject = ((CostConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree reactiveCostsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("reactiveCosts"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(reactiveCostsPropertyTree!= null):((reactiveCostsPropertyTree == null)||(!reactiveCostsPropertyTree.isLeaf())))) {
            _newObject.reactiveCosts = this.reactiveCosts;
        }
        final PropertyTree activePlsCostsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("activePlsCosts"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(activePlsCostsPropertyTree!= null):((activePlsCostsPropertyTree == null)||(!activePlsCostsPropertyTree.isLeaf())))) {
            _newObject.activePlsCosts = this.activePlsCosts;
        }
        final PropertyTree reactivePlsCostsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("reactivePlsCosts"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(reactivePlsCostsPropertyTree!= null):((reactivePlsCostsPropertyTree == null)||(!reactivePlsCostsPropertyTree.isLeaf())))) {
            _newObject.reactivePlsCosts = this.reactivePlsCosts;
        }
        final PropertyTree feedInCostsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("feedInCosts"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(feedInCostsPropertyTree!= null):((feedInCostsPropertyTree == null)||(!feedInCostsPropertyTree.isLeaf())))) {
            _newObject.feedInCosts = this.feedInCosts;
        }
        final PropertyTree autoConsumptionCostsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("autoConsumptionCosts"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(autoConsumptionCostsPropertyTree!= null):((autoConsumptionCostsPropertyTree == null)||(!autoConsumptionCostsPropertyTree.isLeaf())))) {
            _newObject.autoConsumptionCosts = this.autoConsumptionCosts;
        }
        final PropertyTree selfSufficiencyRatioPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("selfSufficiencyRatio"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(selfSufficiencyRatioPropertyTree!= null):((selfSufficiencyRatioPropertyTree == null)||(!selfSufficiencyRatioPropertyTree.isLeaf())))) {
            _newObject.selfSufficiencyRatio = this.selfSufficiencyRatio;
        }
        final PropertyTree selfConsumptionRatioPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("selfConsumptionRatio"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(selfConsumptionRatioPropertyTree!= null):((selfConsumptionRatioPropertyTree == null)||(!selfConsumptionRatioPropertyTree.isLeaf())))) {
            _newObject.selfConsumptionRatio = this.selfConsumptionRatio;
        }
        final PropertyTree overlimitFactorPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("overlimitFactor"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(overlimitFactorPropertyTree!= null):((overlimitFactorPropertyTree == null)||(!overlimitFactorPropertyTree.isLeaf())))) {
            _newObject.overlimitFactor = this.overlimitFactor;
        }
        return _newObject;
    }

    @Override
    public CostConfiguration copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public CostConfiguration copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends CostConfiguration.Selector<CostConfiguration.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static CostConfiguration.Select _root() {
            return new CostConfiguration.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> reactiveCosts = null;
        private com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> activePlsCosts = null;
        private com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> reactivePlsCosts = null;
        private com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> feedInCosts = null;
        private com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> autoConsumptionCosts = null;
        private com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> selfSufficiencyRatio = null;
        private com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> selfConsumptionRatio = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.reactiveCosts!= null) {
                products.put("reactiveCosts", this.reactiveCosts.init());
            }
            if (this.activePlsCosts!= null) {
                products.put("activePlsCosts", this.activePlsCosts.init());
            }
            if (this.reactivePlsCosts!= null) {
                products.put("reactivePlsCosts", this.reactivePlsCosts.init());
            }
            if (this.feedInCosts!= null) {
                products.put("feedInCosts", this.feedInCosts.init());
            }
            if (this.autoConsumptionCosts!= null) {
                products.put("autoConsumptionCosts", this.autoConsumptionCosts.init());
            }
            if (this.selfSufficiencyRatio!= null) {
                products.put("selfSufficiencyRatio", this.selfSufficiencyRatio.init());
            }
            if (this.selfConsumptionRatio!= null) {
                products.put("selfConsumptionRatio", this.selfConsumptionRatio.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> reactiveCosts() {
            return ((this.reactiveCosts == null)?this.reactiveCosts = new com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>>(this._root, this, "reactiveCosts"):this.reactiveCosts);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> activePlsCosts() {
            return ((this.activePlsCosts == null)?this.activePlsCosts = new com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>>(this._root, this, "activePlsCosts"):this.activePlsCosts);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> reactivePlsCosts() {
            return ((this.reactivePlsCosts == null)?this.reactivePlsCosts = new com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>>(this._root, this, "reactivePlsCosts"):this.reactivePlsCosts);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> feedInCosts() {
            return ((this.feedInCosts == null)?this.feedInCosts = new com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>>(this._root, this, "feedInCosts"):this.feedInCosts);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> autoConsumptionCosts() {
            return ((this.autoConsumptionCosts == null)?this.autoConsumptionCosts = new com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>>(this._root, this, "autoConsumptionCosts"):this.autoConsumptionCosts);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> selfSufficiencyRatio() {
            return ((this.selfSufficiencyRatio == null)?this.selfSufficiencyRatio = new com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>>(this._root, this, "selfSufficiencyRatio"):this.selfSufficiencyRatio);
        }

        public com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>> selfConsumptionRatio() {
            return ((this.selfConsumptionRatio == null)?this.selfConsumptionRatio = new com.kscs.util.jaxb.Selector<TRoot, CostConfiguration.Selector<TRoot, TParent>>(this._root, this, "selfConsumptionRatio"):this.selfConsumptionRatio);
        }

    }

}
