//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.4.0-b180830.0438 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.04.03 at 04:51:19 PM CEST 
//


package osh.configuration.oc;

import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import osh.configuration.system.ConfigurationParameter;

import javax.xml.bind.annotation.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * <p>Java class for OperatorConfiguration complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="OperatorConfiguration"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="type" type="{http://osh/configuration/oc}operatorType"/&gt;
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="operatorParameters" type="{http://osh/configuration/system}ConfigurationParameter" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "OperatorConfiguration", propOrder = {
    "type",
    "name",
    "operatorParameters"
})
public class OperatorConfiguration implements Copyable, PartialCopyable
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected OperatorType type;
    @XmlElement(required = true)
    protected String name;
    protected List<ConfigurationParameter> operatorParameters;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public OperatorConfiguration() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a OperatorConfiguration copying the state of another OperatorConfiguration
     * 
     * @param _other
     *     The original OperatorConfiguration from which to copy state.
     */
    public OperatorConfiguration(final OperatorConfiguration _other) {
        this.type = _other.type;
        this.name = _other.name;
        if (_other.operatorParameters == null) {
            this.operatorParameters = null;
        } else {
            this.operatorParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: _other.operatorParameters) {
                this.operatorParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
    }

    /**
     * Instantiates a OperatorConfiguration copying the state of another OperatorConfiguration
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original OperatorConfiguration from which to copy state.
     */
    public OperatorConfiguration(final OperatorConfiguration _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
            this.type = _other.type;
        }
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            this.name = _other.name;
        }
        final PropertyTree operatorParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("operatorParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(operatorParametersPropertyTree!= null):((operatorParametersPropertyTree == null)||(!operatorParametersPropertyTree.isLeaf())))) {
            if (_other.operatorParameters == null) {
                this.operatorParameters = null;
            } else {
                this.operatorParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: _other.operatorParameters) {
                    this.operatorParameters.add(((_item == null)?null:_item.createCopy(operatorParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link OperatorType }
     *     
     */
    public OperatorType getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link OperatorType }
     *     
     */
    public void setType(OperatorType value) {
        this.type = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the operatorParameters property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the operatorParameters property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOperatorParameters().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConfigurationParameter }
     * 
     * 
     */
    public List<ConfigurationParameter> getOperatorParameters() {
        if (operatorParameters == null) {
            operatorParameters = new ArrayList<ConfigurationParameter>();
        }
        return this.operatorParameters;
    }

    @Override
    public OperatorConfiguration createCopy() {
        final OperatorConfiguration _newObject;
        try {
            _newObject = ((OperatorConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.type = this.type;
        _newObject.name = this.name;
        if (this.operatorParameters == null) {
            _newObject.operatorParameters = null;
        } else {
            _newObject.operatorParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: this.operatorParameters) {
                _newObject.operatorParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
        return _newObject;
    }

    @Override
    public OperatorConfiguration createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final OperatorConfiguration _newObject;
        try {
            _newObject = ((OperatorConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree typePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("type"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(typePropertyTree!= null):((typePropertyTree == null)||(!typePropertyTree.isLeaf())))) {
            _newObject.type = this.type;
        }
        final PropertyTree namePropertyTree = ((_propertyTree == null)?null:_propertyTree.get("name"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(namePropertyTree!= null):((namePropertyTree == null)||(!namePropertyTree.isLeaf())))) {
            _newObject.name = this.name;
        }
        final PropertyTree operatorParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("operatorParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(operatorParametersPropertyTree!= null):((operatorParametersPropertyTree == null)||(!operatorParametersPropertyTree.isLeaf())))) {
            if (this.operatorParameters == null) {
                _newObject.operatorParameters = null;
            } else {
                _newObject.operatorParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: this.operatorParameters) {
                    _newObject.operatorParameters.add(((_item == null)?null:_item.createCopy(operatorParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
        return _newObject;
    }

    @Override
    public OperatorConfiguration copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public OperatorConfiguration copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends OperatorConfiguration.Selector<OperatorConfiguration.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static OperatorConfiguration.Select _root() {
            return new OperatorConfiguration.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, OperatorConfiguration.Selector<TRoot, TParent>> type = null;
        private com.kscs.util.jaxb.Selector<TRoot, OperatorConfiguration.Selector<TRoot, TParent>> name = null;
        private ConfigurationParameter.Selector<TRoot, OperatorConfiguration.Selector<TRoot, TParent>> operatorParameters = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.type!= null) {
                products.put("type", this.type.init());
            }
            if (this.name!= null) {
                products.put("name", this.name.init());
            }
            if (this.operatorParameters!= null) {
                products.put("operatorParameters", this.operatorParameters.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, OperatorConfiguration.Selector<TRoot, TParent>> type() {
            return ((this.type == null)?this.type = new com.kscs.util.jaxb.Selector<TRoot, OperatorConfiguration.Selector<TRoot, TParent>>(this._root, this, "type"):this.type);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OperatorConfiguration.Selector<TRoot, TParent>> name() {
            return ((this.name == null)?this.name = new com.kscs.util.jaxb.Selector<TRoot, OperatorConfiguration.Selector<TRoot, TParent>>(this._root, this, "name"):this.name);
        }

        public ConfigurationParameter.Selector<TRoot, OperatorConfiguration.Selector<TRoot, TParent>> operatorParameters() {
            return ((this.operatorParameters == null)?this.operatorParameters = new ConfigurationParameter.Selector<TRoot, OperatorConfiguration.Selector<TRoot, TParent>>(this._root, this, "operatorParameters"):this.operatorParameters);
        }

    }

}
