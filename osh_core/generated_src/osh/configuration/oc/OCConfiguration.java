//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.4.0-b180830.0438 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.04.12 at 10:41:12 PM CEST 
//


package osh.configuration.oc;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import osh.configuration.system.ConfigurationParameter;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="globalOcUuid" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="globalControllerClass" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="globalControllerParameters" type="{http://osh/configuration/system}ConfigurationParameter" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="globalObserverClass" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="globalObserverParameters" type="{http://osh/configuration/system}ConfigurationParameter" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="optimizationMainRandomSeed" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="eaConfiguration" type="{http://osh/configuration/oc}EAConfiguration"/&gt;
 *         &lt;element name="costConfiguration" type="{http://osh/configuration/oc}CostConfiguration"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "globalOcUuid",
    "globalControllerClass",
    "globalControllerParameters",
    "globalObserverClass",
    "globalObserverParameters",
    "optimizationMainRandomSeed",
    "eaConfiguration",
    "costConfiguration"
})
@XmlRootElement(name = "OCConfiguration")
public class OCConfiguration implements Copyable, PartialCopyable
{

    @XmlElement(required = true)
    protected String globalOcUuid;
    @XmlElement(required = true)
    protected String globalControllerClass;
    protected List<ConfigurationParameter> globalControllerParameters;
    @XmlElement(required = true)
    protected String globalObserverClass;
    protected List<ConfigurationParameter> globalObserverParameters;
    @XmlElement(required = true)
    protected String optimizationMainRandomSeed;
    @XmlElement(required = true)
    protected EAConfiguration eaConfiguration;
    @XmlElement(required = true)
    protected CostConfiguration costConfiguration;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public OCConfiguration() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a OCConfiguration copying the state of another OCConfiguration
     * 
     * @param _other
     *     The original OCConfiguration from which to copy state.
     */
    public OCConfiguration(final OCConfiguration _other) {
        this.globalOcUuid = _other.globalOcUuid;
        this.globalControllerClass = _other.globalControllerClass;
        if (_other.globalControllerParameters == null) {
            this.globalControllerParameters = null;
        } else {
            this.globalControllerParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: _other.globalControllerParameters) {
                this.globalControllerParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
        this.globalObserverClass = _other.globalObserverClass;
        if (_other.globalObserverParameters == null) {
            this.globalObserverParameters = null;
        } else {
            this.globalObserverParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: _other.globalObserverParameters) {
                this.globalObserverParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
        this.optimizationMainRandomSeed = _other.optimizationMainRandomSeed;
        this.eaConfiguration = ((_other.eaConfiguration == null)?null:_other.eaConfiguration.createCopy());
        this.costConfiguration = ((_other.costConfiguration == null)?null:_other.costConfiguration.createCopy());
    }

    /**
     * Instantiates a OCConfiguration copying the state of another OCConfiguration
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original OCConfiguration from which to copy state.
     */
    public OCConfiguration(final OCConfiguration _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree globalOcUuidPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalOcUuid"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalOcUuidPropertyTree!= null):((globalOcUuidPropertyTree == null)||(!globalOcUuidPropertyTree.isLeaf())))) {
            this.globalOcUuid = _other.globalOcUuid;
        }
        final PropertyTree globalControllerClassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalControllerClass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalControllerClassPropertyTree!= null):((globalControllerClassPropertyTree == null)||(!globalControllerClassPropertyTree.isLeaf())))) {
            this.globalControllerClass = _other.globalControllerClass;
        }
        final PropertyTree globalControllerParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalControllerParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalControllerParametersPropertyTree!= null):((globalControllerParametersPropertyTree == null)||(!globalControllerParametersPropertyTree.isLeaf())))) {
            if (_other.globalControllerParameters == null) {
                this.globalControllerParameters = null;
            } else {
                this.globalControllerParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: _other.globalControllerParameters) {
                    this.globalControllerParameters.add(((_item == null)?null:_item.createCopy(globalControllerParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree globalObserverClassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalObserverClass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalObserverClassPropertyTree!= null):((globalObserverClassPropertyTree == null)||(!globalObserverClassPropertyTree.isLeaf())))) {
            this.globalObserverClass = _other.globalObserverClass;
        }
        final PropertyTree globalObserverParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalObserverParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalObserverParametersPropertyTree!= null):((globalObserverParametersPropertyTree == null)||(!globalObserverParametersPropertyTree.isLeaf())))) {
            if (_other.globalObserverParameters == null) {
                this.globalObserverParameters = null;
            } else {
                this.globalObserverParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: _other.globalObserverParameters) {
                    this.globalObserverParameters.add(((_item == null)?null:_item.createCopy(globalObserverParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree optimizationMainRandomSeedPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("optimizationMainRandomSeed"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(optimizationMainRandomSeedPropertyTree!= null):((optimizationMainRandomSeedPropertyTree == null)||(!optimizationMainRandomSeedPropertyTree.isLeaf())))) {
            this.optimizationMainRandomSeed = _other.optimizationMainRandomSeed;
        }
        final PropertyTree eaConfigurationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("eaConfiguration"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eaConfigurationPropertyTree!= null):((eaConfigurationPropertyTree == null)||(!eaConfigurationPropertyTree.isLeaf())))) {
            this.eaConfiguration = ((_other.eaConfiguration == null)?null:_other.eaConfiguration.createCopy(eaConfigurationPropertyTree, _propertyTreeUse));
        }
        final PropertyTree costConfigurationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("costConfiguration"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(costConfigurationPropertyTree!= null):((costConfigurationPropertyTree == null)||(!costConfigurationPropertyTree.isLeaf())))) {
            this.costConfiguration = ((_other.costConfiguration == null)?null:_other.costConfiguration.createCopy(costConfigurationPropertyTree, _propertyTreeUse));
        }
    }

    /**
     * Gets the value of the globalOcUuid property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getGlobalOcUuid() {
        return globalOcUuid;
    }

    /**
     * Sets the value of the globalOcUuid property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setGlobalOcUuid(String value) {
        this.globalOcUuid = value;
    }

    /**
     * Gets the value of the globalControllerClass property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getGlobalControllerClass() {
        return globalControllerClass;
    }

    /**
     * Sets the value of the globalControllerClass property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setGlobalControllerClass(String value) {
        this.globalControllerClass = value;
    }

    /**
     * Gets the value of the globalControllerParameters property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the globalControllerParameters property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGlobalControllerParameters().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConfigurationParameter }
     * 
     * 
     */
    public List<ConfigurationParameter> getGlobalControllerParameters() {
        if (globalControllerParameters == null) {
            globalControllerParameters = new ArrayList<ConfigurationParameter>();
        }
        return this.globalControllerParameters;
    }

    /**
     * Gets the value of the globalObserverClass property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getGlobalObserverClass() {
        return globalObserverClass;
    }

    /**
     * Sets the value of the globalObserverClass property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setGlobalObserverClass(String value) {
        this.globalObserverClass = value;
    }

    /**
     * Gets the value of the globalObserverParameters property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the globalObserverParameters property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGlobalObserverParameters().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConfigurationParameter }
     * 
     * 
     */
    public List<ConfigurationParameter> getGlobalObserverParameters() {
        if (globalObserverParameters == null) {
            globalObserverParameters = new ArrayList<ConfigurationParameter>();
        }
        return this.globalObserverParameters;
    }

    /**
     * Gets the value of the optimizationMainRandomSeed property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOptimizationMainRandomSeed() {
        return optimizationMainRandomSeed;
    }

    /**
     * Sets the value of the optimizationMainRandomSeed property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOptimizationMainRandomSeed(String value) {
        this.optimizationMainRandomSeed = value;
    }

    /**
     * Gets the value of the eaConfiguration property.
     * 
     * @return
     *     possible object is
     *     {@link EAConfiguration }
     *     
     */
    public EAConfiguration getEaConfiguration() {
        return eaConfiguration;
    }

    /**
     * Sets the value of the eaConfiguration property.
     * 
     * @param value
     *     allowed object is
     *     {@link EAConfiguration }
     *     
     */
    public void setEaConfiguration(EAConfiguration value) {
        this.eaConfiguration = value;
    }

    /**
     * Gets the value of the costConfiguration property.
     * 
     * @return
     *     possible object is
     *     {@link CostConfiguration }
     *     
     */
    public CostConfiguration getCostConfiguration() {
        return costConfiguration;
    }

    /**
     * Sets the value of the costConfiguration property.
     * 
     * @param value
     *     allowed object is
     *     {@link CostConfiguration }
     *     
     */
    public void setCostConfiguration(CostConfiguration value) {
        this.costConfiguration = value;
    }

    @Override
    public OCConfiguration createCopy() {
        final OCConfiguration _newObject;
        try {
            _newObject = ((OCConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.globalOcUuid = this.globalOcUuid;
        _newObject.globalControllerClass = this.globalControllerClass;
        if (this.globalControllerParameters == null) {
            _newObject.globalControllerParameters = null;
        } else {
            _newObject.globalControllerParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: this.globalControllerParameters) {
                _newObject.globalControllerParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
        _newObject.globalObserverClass = this.globalObserverClass;
        if (this.globalObserverParameters == null) {
            _newObject.globalObserverParameters = null;
        } else {
            _newObject.globalObserverParameters = new ArrayList<ConfigurationParameter>();
            for (ConfigurationParameter _item: this.globalObserverParameters) {
                _newObject.globalObserverParameters.add(((_item == null)?null:_item.createCopy()));
            }
        }
        _newObject.optimizationMainRandomSeed = this.optimizationMainRandomSeed;
        _newObject.eaConfiguration = ((this.eaConfiguration == null)?null:this.eaConfiguration.createCopy());
        _newObject.costConfiguration = ((this.costConfiguration == null)?null:this.costConfiguration.createCopy());
        return _newObject;
    }

    @Override
    public OCConfiguration createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final OCConfiguration _newObject;
        try {
            _newObject = ((OCConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree globalOcUuidPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalOcUuid"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalOcUuidPropertyTree!= null):((globalOcUuidPropertyTree == null)||(!globalOcUuidPropertyTree.isLeaf())))) {
            _newObject.globalOcUuid = this.globalOcUuid;
        }
        final PropertyTree globalControllerClassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalControllerClass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalControllerClassPropertyTree!= null):((globalControllerClassPropertyTree == null)||(!globalControllerClassPropertyTree.isLeaf())))) {
            _newObject.globalControllerClass = this.globalControllerClass;
        }
        final PropertyTree globalControllerParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalControllerParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalControllerParametersPropertyTree!= null):((globalControllerParametersPropertyTree == null)||(!globalControllerParametersPropertyTree.isLeaf())))) {
            if (this.globalControllerParameters == null) {
                _newObject.globalControllerParameters = null;
            } else {
                _newObject.globalControllerParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: this.globalControllerParameters) {
                    _newObject.globalControllerParameters.add(((_item == null)?null:_item.createCopy(globalControllerParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree globalObserverClassPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalObserverClass"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalObserverClassPropertyTree!= null):((globalObserverClassPropertyTree == null)||(!globalObserverClassPropertyTree.isLeaf())))) {
            _newObject.globalObserverClass = this.globalObserverClass;
        }
        final PropertyTree globalObserverParametersPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalObserverParameters"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalObserverParametersPropertyTree!= null):((globalObserverParametersPropertyTree == null)||(!globalObserverParametersPropertyTree.isLeaf())))) {
            if (this.globalObserverParameters == null) {
                _newObject.globalObserverParameters = null;
            } else {
                _newObject.globalObserverParameters = new ArrayList<ConfigurationParameter>();
                for (ConfigurationParameter _item: this.globalObserverParameters) {
                    _newObject.globalObserverParameters.add(((_item == null)?null:_item.createCopy(globalObserverParametersPropertyTree, _propertyTreeUse)));
                }
            }
        }
        final PropertyTree optimizationMainRandomSeedPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("optimizationMainRandomSeed"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(optimizationMainRandomSeedPropertyTree!= null):((optimizationMainRandomSeedPropertyTree == null)||(!optimizationMainRandomSeedPropertyTree.isLeaf())))) {
            _newObject.optimizationMainRandomSeed = this.optimizationMainRandomSeed;
        }
        final PropertyTree eaConfigurationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("eaConfiguration"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(eaConfigurationPropertyTree!= null):((eaConfigurationPropertyTree == null)||(!eaConfigurationPropertyTree.isLeaf())))) {
            _newObject.eaConfiguration = ((this.eaConfiguration == null)?null:this.eaConfiguration.createCopy(eaConfigurationPropertyTree, _propertyTreeUse));
        }
        final PropertyTree costConfigurationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("costConfiguration"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(costConfigurationPropertyTree!= null):((costConfigurationPropertyTree == null)||(!costConfigurationPropertyTree.isLeaf())))) {
            _newObject.costConfiguration = ((this.costConfiguration == null)?null:this.costConfiguration.createCopy(costConfigurationPropertyTree, _propertyTreeUse));
        }
        return _newObject;
    }

    @Override
    public OCConfiguration copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public OCConfiguration copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends OCConfiguration.Selector<OCConfiguration.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static OCConfiguration.Select _root() {
            return new OCConfiguration.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalOcUuid = null;
        private com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalControllerClass = null;
        private ConfigurationParameter.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalControllerParameters = null;
        private com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalObserverClass = null;
        private ConfigurationParameter.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalObserverParameters = null;
        private com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> optimizationMainRandomSeed = null;
        private EAConfiguration.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> eaConfiguration = null;
        private CostConfiguration.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> costConfiguration = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.globalOcUuid!= null) {
                products.put("globalOcUuid", this.globalOcUuid.init());
            }
            if (this.globalControllerClass!= null) {
                products.put("globalControllerClass", this.globalControllerClass.init());
            }
            if (this.globalControllerParameters!= null) {
                products.put("globalControllerParameters", this.globalControllerParameters.init());
            }
            if (this.globalObserverClass!= null) {
                products.put("globalObserverClass", this.globalObserverClass.init());
            }
            if (this.globalObserverParameters!= null) {
                products.put("globalObserverParameters", this.globalObserverParameters.init());
            }
            if (this.optimizationMainRandomSeed!= null) {
                products.put("optimizationMainRandomSeed", this.optimizationMainRandomSeed.init());
            }
            if (this.eaConfiguration!= null) {
                products.put("eaConfiguration", this.eaConfiguration.init());
            }
            if (this.costConfiguration!= null) {
                products.put("costConfiguration", this.costConfiguration.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalOcUuid() {
            return ((this.globalOcUuid == null)?this.globalOcUuid = new com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>>(this._root, this, "globalOcUuid"):this.globalOcUuid);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalControllerClass() {
            return ((this.globalControllerClass == null)?this.globalControllerClass = new com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>>(this._root, this, "globalControllerClass"):this.globalControllerClass);
        }

        public ConfigurationParameter.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalControllerParameters() {
            return ((this.globalControllerParameters == null)?this.globalControllerParameters = new ConfigurationParameter.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>>(this._root, this, "globalControllerParameters"):this.globalControllerParameters);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalObserverClass() {
            return ((this.globalObserverClass == null)?this.globalObserverClass = new com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>>(this._root, this, "globalObserverClass"):this.globalObserverClass);
        }

        public ConfigurationParameter.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalObserverParameters() {
            return ((this.globalObserverParameters == null)?this.globalObserverParameters = new ConfigurationParameter.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>>(this._root, this, "globalObserverParameters"):this.globalObserverParameters);
        }

        public com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> optimizationMainRandomSeed() {
            return ((this.optimizationMainRandomSeed == null)?this.optimizationMainRandomSeed = new com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>>(this._root, this, "optimizationMainRandomSeed"):this.optimizationMainRandomSeed);
        }

        public EAConfiguration.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> eaConfiguration() {
            return ((this.eaConfiguration == null)?this.eaConfiguration = new EAConfiguration.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>>(this._root, this, "eaConfiguration"):this.eaConfiguration);
        }

        public CostConfiguration.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> costConfiguration() {
            return ((this.costConfiguration == null)?this.costConfiguration = new CostConfiguration.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>>(this._root, this, "costConfiguration"):this.costConfiguration);
        }

    }

}
