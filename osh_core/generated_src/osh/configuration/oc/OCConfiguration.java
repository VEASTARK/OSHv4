//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.4.0-b180830.0438 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.08.10 at 03:54:46 PM CEST 
//


package osh.configuration.oc;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="globalOcUuid" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="globalControllerConfiguration" type="{http://osh/configuration/oc}GlobalControllerConfiguration"/&gt;
 *         &lt;element name="globalObserverConfiguration" type="{http://osh/configuration/oc}GlobalObserverConfiguration"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "globalOcUuid",
    "globalControllerConfiguration",
    "globalObserverConfiguration"
})
@XmlRootElement(name = "OCConfiguration")
public class OCConfiguration implements Copyable, PartialCopyable
{

    @XmlElement(required = true)
    protected String globalOcUuid;
    @XmlElement(required = true)
    protected GlobalControllerConfiguration globalControllerConfiguration;
    @XmlElement(required = true)
    protected GlobalObserverConfiguration globalObserverConfiguration;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public OCConfiguration() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a OCConfiguration copying the state of another OCConfiguration
     * 
     * @param _other
     *     The original OCConfiguration from which to copy state.
     */
    public OCConfiguration(final OCConfiguration _other) {
        this.globalOcUuid = _other.globalOcUuid;
        this.globalControllerConfiguration = ((_other.globalControllerConfiguration == null)?null:_other.globalControllerConfiguration.createCopy());
        this.globalObserverConfiguration = ((_other.globalObserverConfiguration == null)?null:_other.globalObserverConfiguration.createCopy());
    }

    /**
     * Instantiates a OCConfiguration copying the state of another OCConfiguration
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original OCConfiguration from which to copy state.
     */
    public OCConfiguration(final OCConfiguration _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree globalOcUuidPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalOcUuid"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalOcUuidPropertyTree!= null):((globalOcUuidPropertyTree == null)||(!globalOcUuidPropertyTree.isLeaf())))) {
            this.globalOcUuid = _other.globalOcUuid;
        }
        final PropertyTree globalControllerConfigurationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalControllerConfiguration"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalControllerConfigurationPropertyTree!= null):((globalControllerConfigurationPropertyTree == null)||(!globalControllerConfigurationPropertyTree.isLeaf())))) {
            this.globalControllerConfiguration = ((_other.globalControllerConfiguration == null)?null:_other.globalControllerConfiguration.createCopy(globalControllerConfigurationPropertyTree, _propertyTreeUse));
        }
        final PropertyTree globalObserverConfigurationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalObserverConfiguration"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalObserverConfigurationPropertyTree!= null):((globalObserverConfigurationPropertyTree == null)||(!globalObserverConfigurationPropertyTree.isLeaf())))) {
            this.globalObserverConfiguration = ((_other.globalObserverConfiguration == null)?null:_other.globalObserverConfiguration.createCopy(globalObserverConfigurationPropertyTree, _propertyTreeUse));
        }
    }

    /**
     * Gets the value of the globalOcUuid property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getGlobalOcUuid() {
        return globalOcUuid;
    }

    /**
     * Sets the value of the globalOcUuid property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setGlobalOcUuid(String value) {
        this.globalOcUuid = value;
    }

    /**
     * Gets the value of the globalControllerConfiguration property.
     * 
     * @return
     *     possible object is
     *     {@link GlobalControllerConfiguration }
     *     
     */
    public GlobalControllerConfiguration getGlobalControllerConfiguration() {
        return globalControllerConfiguration;
    }

    /**
     * Sets the value of the globalControllerConfiguration property.
     * 
     * @param value
     *     allowed object is
     *     {@link GlobalControllerConfiguration }
     *     
     */
    public void setGlobalControllerConfiguration(GlobalControllerConfiguration value) {
        this.globalControllerConfiguration = value;
    }

    /**
     * Gets the value of the globalObserverConfiguration property.
     * 
     * @return
     *     possible object is
     *     {@link GlobalObserverConfiguration }
     *     
     */
    public GlobalObserverConfiguration getGlobalObserverConfiguration() {
        return globalObserverConfiguration;
    }

    /**
     * Sets the value of the globalObserverConfiguration property.
     * 
     * @param value
     *     allowed object is
     *     {@link GlobalObserverConfiguration }
     *     
     */
    public void setGlobalObserverConfiguration(GlobalObserverConfiguration value) {
        this.globalObserverConfiguration = value;
    }

    @Override
    public OCConfiguration createCopy() {
        final OCConfiguration _newObject;
        try {
            _newObject = ((OCConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.globalOcUuid = this.globalOcUuid;
        _newObject.globalControllerConfiguration = ((this.globalControllerConfiguration == null)?null:this.globalControllerConfiguration.createCopy());
        _newObject.globalObserverConfiguration = ((this.globalObserverConfiguration == null)?null:this.globalObserverConfiguration.createCopy());
        return _newObject;
    }

    @Override
    public OCConfiguration createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final OCConfiguration _newObject;
        try {
            _newObject = ((OCConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree globalOcUuidPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalOcUuid"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalOcUuidPropertyTree!= null):((globalOcUuidPropertyTree == null)||(!globalOcUuidPropertyTree.isLeaf())))) {
            _newObject.globalOcUuid = this.globalOcUuid;
        }
        final PropertyTree globalControllerConfigurationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalControllerConfiguration"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalControllerConfigurationPropertyTree!= null):((globalControllerConfigurationPropertyTree == null)||(!globalControllerConfigurationPropertyTree.isLeaf())))) {
            _newObject.globalControllerConfiguration = ((this.globalControllerConfiguration == null)?null:this.globalControllerConfiguration.createCopy(globalControllerConfigurationPropertyTree, _propertyTreeUse));
        }
        final PropertyTree globalObserverConfigurationPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("globalObserverConfiguration"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(globalObserverConfigurationPropertyTree!= null):((globalObserverConfigurationPropertyTree == null)||(!globalObserverConfigurationPropertyTree.isLeaf())))) {
            _newObject.globalObserverConfiguration = ((this.globalObserverConfiguration == null)?null:this.globalObserverConfiguration.createCopy(globalObserverConfigurationPropertyTree, _propertyTreeUse));
        }
        return _newObject;
    }

    @Override
    public OCConfiguration copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public OCConfiguration copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends OCConfiguration.Selector<OCConfiguration.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static OCConfiguration.Select _root() {
            return new OCConfiguration.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalOcUuid = null;
        private GlobalControllerConfiguration.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalControllerConfiguration = null;
        private GlobalObserverConfiguration.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalObserverConfiguration = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.globalOcUuid!= null) {
                products.put("globalOcUuid", this.globalOcUuid.init());
            }
            if (this.globalControllerConfiguration!= null) {
                products.put("globalControllerConfiguration", this.globalControllerConfiguration.init());
            }
            if (this.globalObserverConfiguration!= null) {
                products.put("globalObserverConfiguration", this.globalObserverConfiguration.init());
            }
            return products;
        }

        public com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalOcUuid() {
            return ((this.globalOcUuid == null)?this.globalOcUuid = new com.kscs.util.jaxb.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>>(this._root, this, "globalOcUuid"):this.globalOcUuid);
        }

        public GlobalControllerConfiguration.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalControllerConfiguration() {
            return ((this.globalControllerConfiguration == null)?this.globalControllerConfiguration = new GlobalControllerConfiguration.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>>(this._root, this, "globalControllerConfiguration"):this.globalControllerConfiguration);
        }

        public GlobalObserverConfiguration.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>> globalObserverConfiguration() {
            return ((this.globalObserverConfiguration == null)?this.globalObserverConfiguration = new GlobalObserverConfiguration.Selector<TRoot, OCConfiguration.Selector<TRoot, TParent>>(this._root, this, "globalObserverConfiguration"):this.globalObserverConfiguration);
        }

    }

}
