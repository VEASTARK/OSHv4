//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.4.0-b180830.0438 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.08.10 at 03:54:46 PM CEST 
//


package osh.configuration.oc;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.Copyable;
import com.kscs.util.jaxb.PartialCopyable;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;


/**
 * <p>Java class for LoggingConfiguration complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LoggingConfiguration"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="logObjectiveBest" type="{http://www.w3.org/2001/XMLSchema}boolean"/&gt;
 *         &lt;element name="logQualityIndicators" type="{http://www.w3.org/2001/XMLSchema}boolean"/&gt;
 *         &lt;element name="logParetoFront" type="{http://www.w3.org/2001/XMLSchema}boolean"/&gt;
 *         &lt;element name="logRanking" type="{http://www.w3.org/2001/XMLSchema}boolean"/&gt;
 *         &lt;element name="qualityIndicators" type="{http://osh/configuration/oc}QualityIndicatorConfiguration" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LoggingConfiguration", propOrder = {
    "logObjectiveBest",
    "logQualityIndicators",
    "logParetoFront",
    "logRanking",
    "qualityIndicators"
})
public class LoggingConfiguration implements Copyable, PartialCopyable
{

    protected boolean logObjectiveBest;
    protected boolean logQualityIndicators;
    protected boolean logParetoFront;
    protected boolean logRanking;
    protected List<QualityIndicatorConfiguration> qualityIndicators;

    /**
     * Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
     * 
     */
    public LoggingConfiguration() {
        // Generated by copy-constructor plugin, JAXB requires public no-arg constructor.
    }

    /**
     * Instantiates a LoggingConfiguration copying the state of another LoggingConfiguration
     * 
     * @param _other
     *     The original LoggingConfiguration from which to copy state.
     */
    public LoggingConfiguration(final LoggingConfiguration _other) {
        this.logObjectiveBest = _other.logObjectiveBest;
        this.logQualityIndicators = _other.logQualityIndicators;
        this.logParetoFront = _other.logParetoFront;
        this.logRanking = _other.logRanking;
        if (_other.qualityIndicators == null) {
            this.qualityIndicators = null;
        } else {
            this.qualityIndicators = new ArrayList<QualityIndicatorConfiguration>();
            for (QualityIndicatorConfiguration _item: _other.qualityIndicators) {
                this.qualityIndicators.add(((_item == null)?null:_item.createCopy()));
            }
        }
    }

    /**
     * Instantiates a LoggingConfiguration copying the state of another LoggingConfiguration
     * 
     * @param _propertyTreeUse
     *     Meaning of the {@link PropertyPath}: Exclude or include members contained in property path.
     * @param _propertyTree
     *     A restricting {@link PropertyPath} that defines which nodes of the source object tree should actually be copied.
     * @param _other
     *     The original LoggingConfiguration from which to copy state.
     */
    public LoggingConfiguration(final LoggingConfiguration _other, final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final PropertyTree logObjectiveBestPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("logObjectiveBest"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(logObjectiveBestPropertyTree!= null):((logObjectiveBestPropertyTree == null)||(!logObjectiveBestPropertyTree.isLeaf())))) {
            this.logObjectiveBest = _other.logObjectiveBest;
        }
        final PropertyTree logQualityIndicatorsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("logQualityIndicators"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(logQualityIndicatorsPropertyTree!= null):((logQualityIndicatorsPropertyTree == null)||(!logQualityIndicatorsPropertyTree.isLeaf())))) {
            this.logQualityIndicators = _other.logQualityIndicators;
        }
        final PropertyTree logParetoFrontPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("logParetoFront"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(logParetoFrontPropertyTree!= null):((logParetoFrontPropertyTree == null)||(!logParetoFrontPropertyTree.isLeaf())))) {
            this.logParetoFront = _other.logParetoFront;
        }
        final PropertyTree logRankingPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("logRanking"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(logRankingPropertyTree!= null):((logRankingPropertyTree == null)||(!logRankingPropertyTree.isLeaf())))) {
            this.logRanking = _other.logRanking;
        }
        final PropertyTree qualityIndicatorsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("qualityIndicators"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(qualityIndicatorsPropertyTree!= null):((qualityIndicatorsPropertyTree == null)||(!qualityIndicatorsPropertyTree.isLeaf())))) {
            if (_other.qualityIndicators == null) {
                this.qualityIndicators = null;
            } else {
                this.qualityIndicators = new ArrayList<QualityIndicatorConfiguration>();
                for (QualityIndicatorConfiguration _item: _other.qualityIndicators) {
                    this.qualityIndicators.add(((_item == null)?null:_item.createCopy(qualityIndicatorsPropertyTree, _propertyTreeUse)));
                }
            }
        }
    }

    /**
     * Gets the value of the logObjectiveBest property.
     * 
     */
    public boolean isLogObjectiveBest() {
        return logObjectiveBest;
    }

    /**
     * Sets the value of the logObjectiveBest property.
     * 
     */
    public void setLogObjectiveBest(boolean value) {
        this.logObjectiveBest = value;
    }

    /**
     * Gets the value of the logQualityIndicators property.
     * 
     */
    public boolean isLogQualityIndicators() {
        return logQualityIndicators;
    }

    /**
     * Sets the value of the logQualityIndicators property.
     * 
     */
    public void setLogQualityIndicators(boolean value) {
        this.logQualityIndicators = value;
    }

    /**
     * Gets the value of the logParetoFront property.
     * 
     */
    public boolean isLogParetoFront() {
        return logParetoFront;
    }

    /**
     * Sets the value of the logParetoFront property.
     * 
     */
    public void setLogParetoFront(boolean value) {
        this.logParetoFront = value;
    }

    /**
     * Gets the value of the logRanking property.
     * 
     */
    public boolean isLogRanking() {
        return logRanking;
    }

    /**
     * Sets the value of the logRanking property.
     * 
     */
    public void setLogRanking(boolean value) {
        this.logRanking = value;
    }

    /**
     * Gets the value of the qualityIndicators property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the qualityIndicators property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getQualityIndicators().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link QualityIndicatorConfiguration }
     * 
     * 
     */
    public List<QualityIndicatorConfiguration> getQualityIndicators() {
        if (qualityIndicators == null) {
            qualityIndicators = new ArrayList<QualityIndicatorConfiguration>();
        }
        return this.qualityIndicators;
    }

    @Override
    public LoggingConfiguration createCopy() {
        final LoggingConfiguration _newObject;
        try {
            _newObject = ((LoggingConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        _newObject.logObjectiveBest = this.logObjectiveBest;
        _newObject.logQualityIndicators = this.logQualityIndicators;
        _newObject.logParetoFront = this.logParetoFront;
        _newObject.logRanking = this.logRanking;
        if (this.qualityIndicators == null) {
            _newObject.qualityIndicators = null;
        } else {
            _newObject.qualityIndicators = new ArrayList<QualityIndicatorConfiguration>();
            for (QualityIndicatorConfiguration _item: this.qualityIndicators) {
                _newObject.qualityIndicators.add(((_item == null)?null:_item.createCopy()));
            }
        }
        return _newObject;
    }

    @Override
    public LoggingConfiguration createCopy(final PropertyTree _propertyTree, final PropertyTreeUse _propertyTreeUse) {
        final LoggingConfiguration _newObject;
        try {
            _newObject = ((LoggingConfiguration) super.clone());
        } catch (CloneNotSupportedException e) {
            throw new RuntimeException(e);
        }
        final PropertyTree logObjectiveBestPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("logObjectiveBest"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(logObjectiveBestPropertyTree!= null):((logObjectiveBestPropertyTree == null)||(!logObjectiveBestPropertyTree.isLeaf())))) {
            _newObject.logObjectiveBest = this.logObjectiveBest;
        }
        final PropertyTree logQualityIndicatorsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("logQualityIndicators"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(logQualityIndicatorsPropertyTree!= null):((logQualityIndicatorsPropertyTree == null)||(!logQualityIndicatorsPropertyTree.isLeaf())))) {
            _newObject.logQualityIndicators = this.logQualityIndicators;
        }
        final PropertyTree logParetoFrontPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("logParetoFront"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(logParetoFrontPropertyTree!= null):((logParetoFrontPropertyTree == null)||(!logParetoFrontPropertyTree.isLeaf())))) {
            _newObject.logParetoFront = this.logParetoFront;
        }
        final PropertyTree logRankingPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("logRanking"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(logRankingPropertyTree!= null):((logRankingPropertyTree == null)||(!logRankingPropertyTree.isLeaf())))) {
            _newObject.logRanking = this.logRanking;
        }
        final PropertyTree qualityIndicatorsPropertyTree = ((_propertyTree == null)?null:_propertyTree.get("qualityIndicators"));
        if (((_propertyTreeUse == PropertyTreeUse.INCLUDE)?(qualityIndicatorsPropertyTree!= null):((qualityIndicatorsPropertyTree == null)||(!qualityIndicatorsPropertyTree.isLeaf())))) {
            if (this.qualityIndicators == null) {
                _newObject.qualityIndicators = null;
            } else {
                _newObject.qualityIndicators = new ArrayList<QualityIndicatorConfiguration>();
                for (QualityIndicatorConfiguration _item: this.qualityIndicators) {
                    _newObject.qualityIndicators.add(((_item == null)?null:_item.createCopy(qualityIndicatorsPropertyTree, _propertyTreeUse)));
                }
            }
        }
        return _newObject;
    }

    @Override
    public LoggingConfiguration copyExcept(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.EXCLUDE);
    }

    @Override
    public LoggingConfiguration copyOnly(final PropertyTree _propertyTree) {
        return createCopy(_propertyTree, PropertyTreeUse.INCLUDE);
    }

    public static class Select
        extends LoggingConfiguration.Selector<LoggingConfiguration.Select, Void>
    {


        Select() {
            super(null, null, null);
        }

        public static LoggingConfiguration.Select _root() {
            return new LoggingConfiguration.Select();
        }

    }

    public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?> , TParent >
        extends com.kscs.util.jaxb.Selector<TRoot, TParent>
    {

        private QualityIndicatorConfiguration.Selector<TRoot, LoggingConfiguration.Selector<TRoot, TParent>> qualityIndicators = null;

        public Selector(final TRoot root, final TParent parent, final String propertyName) {
            super(root, parent, propertyName);
        }

        @Override
        public Map<String, PropertyTree> buildChildren() {
            final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
            products.putAll(super.buildChildren());
            if (this.qualityIndicators!= null) {
                products.put("qualityIndicators", this.qualityIndicators.init());
            }
            return products;
        }

        public QualityIndicatorConfiguration.Selector<TRoot, LoggingConfiguration.Selector<TRoot, TParent>> qualityIndicators() {
            return ((this.qualityIndicators == null)?this.qualityIndicators = new QualityIndicatorConfiguration.Selector<TRoot, LoggingConfiguration.Selector<TRoot, TParent>>(this._root, this, "qualityIndicators"):this.qualityIndicators);
        }

    }

}
